2025-06-08 11:33:24 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 11:33:24 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 11:33:24 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='api.gradio.app' port=443 local_address=None timeout=3 socket_options=None
2025-06-08 11:33:24 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectError(PermissionError(13, 'Intento de acceso a un socket no permitido por sus permisos de acceso', None, 10013, None))
2025-06-08 11:33:25 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 11:33:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=None socket_options=None
2025-06-08 11:33:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000026D90543C80>
2025-06-08 11:33:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 11:33:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 11:33:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 11:33:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 11:33:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 11:33:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 15:33:25 GMT'), (b'server', b'uvicorn'), (b'content-length', b'4'), (b'content-type', b'application/json')])
2025-06-08 11:33:26 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET http://127.0.0.1:7860/gradio_api/startup-events "HTTP/1.1 200 OK"
2025-06-08 11:33:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 11:33:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 11:33:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 11:33:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 11:33:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 11:33:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 11:33:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=3 socket_options=None
2025-06-08 11:33:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000026D90645F70>
2025-06-08 11:33:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'HEAD']>
2025-06-08 11:33:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 11:33:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'HEAD']>
2025-06-08 11:33:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 11:33:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'HEAD']>
2025-06-08 11:33:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 15:33:25 GMT'), (b'server', b'uvicorn'), (b'content-length', b'25330'), (b'content-type', b'text/html; charset=utf-8')])
2025-06-08 11:33:26 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: HEAD http://127.0.0.1:7860/ "HTTP/1.1 200 OK"
2025-06-08 11:33:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'HEAD']>
2025-06-08 11:33:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 11:33:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 11:33:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 11:33:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 11:33:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 11:33:26 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 11:34:15 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_begin with no data
2025-06-08 11:34:15 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[42:61]
2025-06-08 11:34:15 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[63:115]
2025-06-08 11:34:15 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 11:34:15 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[117:129]
2025-06-08 11:34:15 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[131:141]
2025-06-08 11:34:15 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 11:34:15 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_headers_finished with no data
2025-06-08 11:34:15 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[145:81920]
2025-06-08 11:34:15 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 11:34:15 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 11:34:15 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 11:34:15 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 11:34:15 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:37046]
2025-06-08 11:34:15 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_end with no data
2025-06-08 11:34:15 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_end with no data
2025-06-08 11:34:16 | INFO     | app | main.py:32 | transcribe() | Transcribe: C:\Users\lin\AppData\Local\Temp\gradio\fdfadc6d4f252af4681116790d34e753832c4f3237d6506ae4892bdc7d357452\audio_prueba.mp3
2025-06-08 11:34:16 | DEBUG    | app | main.py:41 | transcribe() | Transcription: Esto es un ejemplo
2025-06-08 11:34:54 | INFO     | app | main.py:100 | generate_acta() | Generating 'Acta'
2025-06-08 11:34:54 | DEBUG    | app | main.py:109 | generate_acta() | Prompt:

<prompt>
  <rol>
    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.
  </rol>
  <objetivo>
    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.
  </objetivo>
  <restricciones>
    <item>No agregues información que no esté en la transcripción.</item>
    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>
    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>
    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>
    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>
  </restricciones>
  <formato_salida>
    El JSON debe contener los siguientes campos:
    {
        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",
        "fecha": "<Fecha de la reunión, si se menciona>",
        "hora": "<Hora de inicio, si se menciona>",
        "tipo_sesion": "<Tipo de sesión, 'Ordinaria' o 'Extraordinaria' exclusivamente, si se menciona>",
        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",
        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",
        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",
        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",
        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",
        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",
    }
  </formato_salida>
  <transcripcion>
    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números...  Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes.  Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.
  </transcripcion>
</prompt>

2025-06-08 11:34:54 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\n<prompt>\n  <rol>\n    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.\n  </rol>\n  <objetivo>\n    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.\n  </objetivo>\n  <restricciones>\n    <item>No agregues información que no esté en la transcripción.</item>\n    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>\n    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>\n    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>\n    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>\n  </restricciones>\n  <formato_salida>\n    El JSON debe contener los siguientes campos:\n    {\n        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",\n        "fecha": "<Fecha de la reunión, si se menciona>",\n        "hora": "<Hora de inicio, si se menciona>",\n        "tipo_sesion": "<Tipo de sesión, \'Ordinaria\' o \'Extraordinaria\' exclusivamente, si se menciona>",\n        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",\n        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",\n        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",\n        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",\n        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",\n        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",\n    }\n  </formato_salida>\n  <transcripcion>\n    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n  </transcripcion>\n</prompt>\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 11:34:54 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 11:34:54 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 11:34:54 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectError(PermissionError(13, 'Intento de acceso a un socket no permitido por sus permisos de acceso', None, 10013, None))
2025-06-08 11:34:54 | DEBUG    | openai._base_client | _base_client.py:976 | _request() | Encountered Exception
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    raise exc
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 78, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 124, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_backends\sync.py", line 207, in connect_tcp
    with map_exceptions(exc_map):
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 955, in _request
    response = self._client.send(
               ^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 914, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 249, in handle_request
    with map_httpcore_exceptions():
         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso
2025-06-08 11:34:54 | DEBUG    | openai._base_client | _base_client.py:1048 | _retry_request() | 2 retries left
2025-06-08 11:34:54 | INFO     | openai._base_client | _base_client.py:1051 | _retry_request() | Retrying request to /chat/completions in 0.481801 seconds
2025-06-08 11:34:55 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\n<prompt>\n  <rol>\n    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.\n  </rol>\n  <objetivo>\n    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.\n  </objetivo>\n  <restricciones>\n    <item>No agregues información que no esté en la transcripción.</item>\n    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>\n    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>\n    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>\n    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>\n  </restricciones>\n  <formato_salida>\n    El JSON debe contener los siguientes campos:\n    {\n        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",\n        "fecha": "<Fecha de la reunión, si se menciona>",\n        "hora": "<Hora de inicio, si se menciona>",\n        "tipo_sesion": "<Tipo de sesión, \'Ordinaria\' o \'Extraordinaria\' exclusivamente, si se menciona>",\n        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",\n        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",\n        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",\n        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",\n        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",\n        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",\n    }\n  </formato_salida>\n  <transcripcion>\n    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n  </transcripcion>\n</prompt>\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 11:34:55 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 11:34:55 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 11:34:55 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectError(PermissionError(13, 'Intento de acceso a un socket no permitido por sus permisos de acceso', None, 10013, None))
2025-06-08 11:34:55 | DEBUG    | openai._base_client | _base_client.py:976 | _request() | Encountered Exception
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    raise exc
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 78, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 124, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_backends\sync.py", line 207, in connect_tcp
    with map_exceptions(exc_map):
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 955, in _request
    response = self._client.send(
               ^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 914, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 249, in handle_request
    with map_httpcore_exceptions():
         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso
2025-06-08 11:34:55 | DEBUG    | openai._base_client | _base_client.py:1046 | _retry_request() | 1 retry left
2025-06-08 11:34:55 | INFO     | openai._base_client | _base_client.py:1051 | _retry_request() | Retrying request to /chat/completions in 0.939514 seconds
2025-06-08 11:34:56 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\n<prompt>\n  <rol>\n    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.\n  </rol>\n  <objetivo>\n    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.\n  </objetivo>\n  <restricciones>\n    <item>No agregues información que no esté en la transcripción.</item>\n    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>\n    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>\n    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>\n    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>\n  </restricciones>\n  <formato_salida>\n    El JSON debe contener los siguientes campos:\n    {\n        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",\n        "fecha": "<Fecha de la reunión, si se menciona>",\n        "hora": "<Hora de inicio, si se menciona>",\n        "tipo_sesion": "<Tipo de sesión, \'Ordinaria\' o \'Extraordinaria\' exclusivamente, si se menciona>",\n        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",\n        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",\n        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",\n        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",\n        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",\n        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",\n    }\n  </formato_salida>\n  <transcripcion>\n    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n  </transcripcion>\n</prompt>\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 11:34:56 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 11:34:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 11:34:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectError(PermissionError(13, 'Intento de acceso a un socket no permitido por sus permisos de acceso', None, 10013, None))
2025-06-08 11:34:56 | DEBUG    | openai._base_client | _base_client.py:976 | _request() | Encountered Exception
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    raise exc
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 78, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 124, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_backends\sync.py", line 207, in connect_tcp
    with map_exceptions(exc_map):
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 955, in _request
    response = self._client.send(
               ^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 914, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 249, in handle_request
    with map_httpcore_exceptions():
         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso
2025-06-08 11:34:56 | DEBUG    | openai._base_client | _base_client.py:988 | _request() | Raising connection error
2025-06-08 11:34:56 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: Connection error.
2025-06-08 11:34:56 | DEBUG    | app | main.py:109 | generate_acta() | Prompt:

<prompt>
  <rol>
    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.
  </rol>
  <objetivo>
    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.
  </objetivo>
  <restricciones>
    <item>No agregues información que no esté en la transcripción.</item>
    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>
    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>
    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>
    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>
  </restricciones>
  <formato_salida>
    El JSON debe contener los siguientes campos:
    {
        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",
        "fecha": "<Fecha de la reunión, si se menciona>",
        "hora": "<Hora de inicio, si se menciona>",
        "tipo_sesion": "<Tipo de sesión, 'Ordinaria' o 'Extraordinaria' exclusivamente, si se menciona>",
        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",
        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",
        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",
        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",
        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",
        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",
    }
  </formato_salida>
  <transcripcion>
    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números...  Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes.  Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.
  </transcripcion>
</prompt>

2025-06-08 11:34:56 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\n<prompt>\n  <rol>\n    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.\n  </rol>\n  <objetivo>\n    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.\n  </objetivo>\n  <restricciones>\n    <item>No agregues información que no esté en la transcripción.</item>\n    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>\n    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>\n    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>\n    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>\n  </restricciones>\n  <formato_salida>\n    El JSON debe contener los siguientes campos:\n    {\n        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",\n        "fecha": "<Fecha de la reunión, si se menciona>",\n        "hora": "<Hora de inicio, si se menciona>",\n        "tipo_sesion": "<Tipo de sesión, \'Ordinaria\' o \'Extraordinaria\' exclusivamente, si se menciona>",\n        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",\n        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",\n        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",\n        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",\n        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",\n        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",\n    }\n  </formato_salida>\n  <transcripcion>\n    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n  </transcripcion>\n</prompt>\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 11:34:56 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 11:34:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 11:34:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectError(PermissionError(13, 'Intento de acceso a un socket no permitido por sus permisos de acceso', None, 10013, None))
2025-06-08 11:34:56 | DEBUG    | openai._base_client | _base_client.py:976 | _request() | Encountered Exception
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    raise exc
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 78, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 124, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_backends\sync.py", line 207, in connect_tcp
    with map_exceptions(exc_map):
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 955, in _request
    response = self._client.send(
               ^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 914, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 249, in handle_request
    with map_httpcore_exceptions():
         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso
2025-06-08 11:34:56 | DEBUG    | openai._base_client | _base_client.py:1048 | _retry_request() | 2 retries left
2025-06-08 11:34:56 | INFO     | openai._base_client | _base_client.py:1051 | _retry_request() | Retrying request to /chat/completions in 0.494941 seconds
2025-06-08 11:34:56 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\n<prompt>\n  <rol>\n    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.\n  </rol>\n  <objetivo>\n    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.\n  </objetivo>\n  <restricciones>\n    <item>No agregues información que no esté en la transcripción.</item>\n    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>\n    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>\n    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>\n    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>\n  </restricciones>\n  <formato_salida>\n    El JSON debe contener los siguientes campos:\n    {\n        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",\n        "fecha": "<Fecha de la reunión, si se menciona>",\n        "hora": "<Hora de inicio, si se menciona>",\n        "tipo_sesion": "<Tipo de sesión, \'Ordinaria\' o \'Extraordinaria\' exclusivamente, si se menciona>",\n        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",\n        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",\n        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",\n        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",\n        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",\n        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",\n    }\n  </formato_salida>\n  <transcripcion>\n    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n  </transcripcion>\n</prompt>\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 11:34:56 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 11:34:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 11:34:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectError(PermissionError(13, 'Intento de acceso a un socket no permitido por sus permisos de acceso', None, 10013, None))
2025-06-08 11:34:56 | DEBUG    | openai._base_client | _base_client.py:976 | _request() | Encountered Exception
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    raise exc
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 78, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 124, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_backends\sync.py", line 207, in connect_tcp
    with map_exceptions(exc_map):
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 955, in _request
    response = self._client.send(
               ^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 914, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 249, in handle_request
    with map_httpcore_exceptions():
         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso
2025-06-08 11:34:56 | DEBUG    | openai._base_client | _base_client.py:1046 | _retry_request() | 1 retry left
2025-06-08 11:34:56 | INFO     | openai._base_client | _base_client.py:1051 | _retry_request() | Retrying request to /chat/completions in 0.801681 seconds
2025-06-08 11:34:57 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\n<prompt>\n  <rol>\n    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.\n  </rol>\n  <objetivo>\n    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.\n  </objetivo>\n  <restricciones>\n    <item>No agregues información que no esté en la transcripción.</item>\n    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>\n    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>\n    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>\n    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>\n  </restricciones>\n  <formato_salida>\n    El JSON debe contener los siguientes campos:\n    {\n        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",\n        "fecha": "<Fecha de la reunión, si se menciona>",\n        "hora": "<Hora de inicio, si se menciona>",\n        "tipo_sesion": "<Tipo de sesión, \'Ordinaria\' o \'Extraordinaria\' exclusivamente, si se menciona>",\n        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",\n        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",\n        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",\n        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",\n        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",\n        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",\n    }\n  </formato_salida>\n  <transcripcion>\n    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n  </transcripcion>\n</prompt>\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 11:34:57 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 11:34:57 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 11:34:57 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectError(PermissionError(13, 'Intento de acceso a un socket no permitido por sus permisos de acceso', None, 10013, None))
2025-06-08 11:34:57 | DEBUG    | openai._base_client | _base_client.py:976 | _request() | Encountered Exception
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    raise exc
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 78, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 124, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_backends\sync.py", line 207, in connect_tcp
    with map_exceptions(exc_map):
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 955, in _request
    response = self._client.send(
               ^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 914, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 249, in handle_request
    with map_httpcore_exceptions():
         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso
2025-06-08 11:34:57 | DEBUG    | openai._base_client | _base_client.py:988 | _request() | Raising connection error
2025-06-08 11:34:57 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: Connection error.
2025-06-08 11:34:57 | DEBUG    | app | main.py:109 | generate_acta() | Prompt:

<prompt>
  <rol>
    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.
  </rol>
  <objetivo>
    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.
  </objetivo>
  <restricciones>
    <item>No agregues información que no esté en la transcripción.</item>
    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>
    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>
    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>
    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>
  </restricciones>
  <formato_salida>
    El JSON debe contener los siguientes campos:
    {
        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",
        "fecha": "<Fecha de la reunión, si se menciona>",
        "hora": "<Hora de inicio, si se menciona>",
        "tipo_sesion": "<Tipo de sesión, 'Ordinaria' o 'Extraordinaria' exclusivamente, si se menciona>",
        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",
        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",
        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",
        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",
        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",
        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",
    }
  </formato_salida>
  <transcripcion>
    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números...  Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes.  Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.
  </transcripcion>
</prompt>

2025-06-08 11:34:57 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\n<prompt>\n  <rol>\n    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.\n  </rol>\n  <objetivo>\n    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.\n  </objetivo>\n  <restricciones>\n    <item>No agregues información que no esté en la transcripción.</item>\n    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>\n    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>\n    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>\n    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>\n  </restricciones>\n  <formato_salida>\n    El JSON debe contener los siguientes campos:\n    {\n        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",\n        "fecha": "<Fecha de la reunión, si se menciona>",\n        "hora": "<Hora de inicio, si se menciona>",\n        "tipo_sesion": "<Tipo de sesión, \'Ordinaria\' o \'Extraordinaria\' exclusivamente, si se menciona>",\n        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",\n        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",\n        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",\n        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",\n        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",\n        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",\n    }\n  </formato_salida>\n  <transcripcion>\n    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n  </transcripcion>\n</prompt>\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 11:34:57 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 11:34:57 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 11:34:57 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectError(PermissionError(13, 'Intento de acceso a un socket no permitido por sus permisos de acceso', None, 10013, None))
2025-06-08 11:34:57 | DEBUG    | openai._base_client | _base_client.py:976 | _request() | Encountered Exception
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    raise exc
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 78, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 124, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_backends\sync.py", line 207, in connect_tcp
    with map_exceptions(exc_map):
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 955, in _request
    response = self._client.send(
               ^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 914, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 249, in handle_request
    with map_httpcore_exceptions():
         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso
2025-06-08 11:34:57 | DEBUG    | openai._base_client | _base_client.py:1048 | _retry_request() | 2 retries left
2025-06-08 11:34:57 | INFO     | openai._base_client | _base_client.py:1051 | _retry_request() | Retrying request to /chat/completions in 0.386926 seconds
2025-06-08 11:34:58 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\n<prompt>\n  <rol>\n    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.\n  </rol>\n  <objetivo>\n    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.\n  </objetivo>\n  <restricciones>\n    <item>No agregues información que no esté en la transcripción.</item>\n    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>\n    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>\n    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>\n    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>\n  </restricciones>\n  <formato_salida>\n    El JSON debe contener los siguientes campos:\n    {\n        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",\n        "fecha": "<Fecha de la reunión, si se menciona>",\n        "hora": "<Hora de inicio, si se menciona>",\n        "tipo_sesion": "<Tipo de sesión, \'Ordinaria\' o \'Extraordinaria\' exclusivamente, si se menciona>",\n        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",\n        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",\n        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",\n        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",\n        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",\n        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",\n    }\n  </formato_salida>\n  <transcripcion>\n    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n  </transcripcion>\n</prompt>\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 11:34:58 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 11:34:58 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 11:34:58 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectError(PermissionError(13, 'Intento de acceso a un socket no permitido por sus permisos de acceso', None, 10013, None))
2025-06-08 11:34:58 | DEBUG    | openai._base_client | _base_client.py:976 | _request() | Encountered Exception
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    raise exc
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 78, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 124, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_backends\sync.py", line 207, in connect_tcp
    with map_exceptions(exc_map):
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 955, in _request
    response = self._client.send(
               ^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 914, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 249, in handle_request
    with map_httpcore_exceptions():
         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso
2025-06-08 11:34:58 | DEBUG    | openai._base_client | _base_client.py:1046 | _retry_request() | 1 retry left
2025-06-08 11:34:58 | INFO     | openai._base_client | _base_client.py:1051 | _retry_request() | Retrying request to /chat/completions in 0.916963 seconds
2025-06-08 11:34:59 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\n<prompt>\n  <rol>\n    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.\n  </rol>\n  <objetivo>\n    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.\n  </objetivo>\n  <restricciones>\n    <item>No agregues información que no esté en la transcripción.</item>\n    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>\n    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>\n    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>\n    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>\n  </restricciones>\n  <formato_salida>\n    El JSON debe contener los siguientes campos:\n    {\n        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",\n        "fecha": "<Fecha de la reunión, si se menciona>",\n        "hora": "<Hora de inicio, si se menciona>",\n        "tipo_sesion": "<Tipo de sesión, \'Ordinaria\' o \'Extraordinaria\' exclusivamente, si se menciona>",\n        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",\n        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",\n        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",\n        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",\n        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",\n        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",\n    }\n  </formato_salida>\n  <transcripcion>\n    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n  </transcripcion>\n</prompt>\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 11:34:59 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 11:34:59 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 11:34:59 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectError(PermissionError(13, 'Intento de acceso a un socket no permitido por sus permisos de acceso', None, 10013, None))
2025-06-08 11:34:59 | DEBUG    | openai._base_client | _base_client.py:976 | _request() | Encountered Exception
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    raise exc
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 78, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 124, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_backends\sync.py", line 207, in connect_tcp
    with map_exceptions(exc_map):
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 955, in _request
    response = self._client.send(
               ^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 914, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 249, in handle_request
    with map_httpcore_exceptions():
         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso
2025-06-08 11:34:59 | DEBUG    | openai._base_client | _base_client.py:988 | _request() | Raising connection error
2025-06-08 11:34:59 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: Connection error.
2025-06-08 11:35:54 | INFO     | app | main.py:100 | generate_acta() | Generating 'Acta'
2025-06-08 11:35:54 | DEBUG    | app | main.py:109 | generate_acta() | Prompt:

<prompt>
  <rol>
    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.
  </rol>
  <objetivo>
    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.
  </objetivo>
  <restricciones>
    <item>No agregues información que no esté en la transcripción.</item>
    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>
    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>
    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>
    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>
  </restricciones>
  <formato_salida>
    El JSON debe contener los siguientes campos:
    {
        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",
        "fecha": "<Fecha de la reunión, si se menciona>",
        "hora": "<Hora de inicio, si se menciona>",
        "tipo_sesion": "<Tipo de sesión, 'Ordinaria' o 'Extraordinaria' exclusivamente, si se menciona>",
        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",
        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",
        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",
        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",
        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",
        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",
    }
  </formato_salida>
  <transcripcion>
    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, hoy 25/2/2025 empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números...  Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes.  Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.
  </transcripcion>
</prompt>

2025-06-08 11:35:54 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\n<prompt>\n  <rol>\n    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.\n  </rol>\n  <objetivo>\n    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.\n  </objetivo>\n  <restricciones>\n    <item>No agregues información que no esté en la transcripción.</item>\n    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>\n    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>\n    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>\n    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>\n  </restricciones>\n  <formato_salida>\n    El JSON debe contener los siguientes campos:\n    {\n        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",\n        "fecha": "<Fecha de la reunión, si se menciona>",\n        "hora": "<Hora de inicio, si se menciona>",\n        "tipo_sesion": "<Tipo de sesión, \'Ordinaria\' o \'Extraordinaria\' exclusivamente, si se menciona>",\n        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",\n        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",\n        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",\n        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",\n        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",\n        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",\n    }\n  </formato_salida>\n  <transcripcion>\n    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, hoy 25/2/2025 empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n  </transcripcion>\n</prompt>\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 11:35:54 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 11:35:54 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 11:35:54 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectError(PermissionError(13, 'Intento de acceso a un socket no permitido por sus permisos de acceso', None, 10013, None))
2025-06-08 11:35:54 | DEBUG    | openai._base_client | _base_client.py:976 | _request() | Encountered Exception
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    raise exc
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 78, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 124, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_backends\sync.py", line 207, in connect_tcp
    with map_exceptions(exc_map):
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 955, in _request
    response = self._client.send(
               ^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 914, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 249, in handle_request
    with map_httpcore_exceptions():
         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso
2025-06-08 11:35:54 | DEBUG    | openai._base_client | _base_client.py:1048 | _retry_request() | 2 retries left
2025-06-08 11:35:54 | INFO     | openai._base_client | _base_client.py:1051 | _retry_request() | Retrying request to /chat/completions in 0.400233 seconds
2025-06-08 11:35:54 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\n<prompt>\n  <rol>\n    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.\n  </rol>\n  <objetivo>\n    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.\n  </objetivo>\n  <restricciones>\n    <item>No agregues información que no esté en la transcripción.</item>\n    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>\n    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>\n    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>\n    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>\n  </restricciones>\n  <formato_salida>\n    El JSON debe contener los siguientes campos:\n    {\n        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",\n        "fecha": "<Fecha de la reunión, si se menciona>",\n        "hora": "<Hora de inicio, si se menciona>",\n        "tipo_sesion": "<Tipo de sesión, \'Ordinaria\' o \'Extraordinaria\' exclusivamente, si se menciona>",\n        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",\n        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",\n        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",\n        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",\n        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",\n        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",\n    }\n  </formato_salida>\n  <transcripcion>\n    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, hoy 25/2/2025 empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n  </transcripcion>\n</prompt>\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 11:35:54 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 11:35:54 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 11:35:54 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectError(PermissionError(13, 'Intento de acceso a un socket no permitido por sus permisos de acceso', None, 10013, None))
2025-06-08 11:35:54 | DEBUG    | openai._base_client | _base_client.py:976 | _request() | Encountered Exception
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    raise exc
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 78, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 124, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_backends\sync.py", line 207, in connect_tcp
    with map_exceptions(exc_map):
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 955, in _request
    response = self._client.send(
               ^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 914, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 249, in handle_request
    with map_httpcore_exceptions():
         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso
2025-06-08 11:35:54 | DEBUG    | openai._base_client | _base_client.py:1046 | _retry_request() | 1 retry left
2025-06-08 11:35:54 | INFO     | openai._base_client | _base_client.py:1051 | _retry_request() | Retrying request to /chat/completions in 0.846743 seconds
2025-06-08 11:35:55 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\n<prompt>\n  <rol>\n    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.\n  </rol>\n  <objetivo>\n    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.\n  </objetivo>\n  <restricciones>\n    <item>No agregues información que no esté en la transcripción.</item>\n    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>\n    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>\n    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>\n    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>\n  </restricciones>\n  <formato_salida>\n    El JSON debe contener los siguientes campos:\n    {\n        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",\n        "fecha": "<Fecha de la reunión, si se menciona>",\n        "hora": "<Hora de inicio, si se menciona>",\n        "tipo_sesion": "<Tipo de sesión, \'Ordinaria\' o \'Extraordinaria\' exclusivamente, si se menciona>",\n        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",\n        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",\n        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",\n        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",\n        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",\n        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",\n    }\n  </formato_salida>\n  <transcripcion>\n    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, hoy 25/2/2025 empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n  </transcripcion>\n</prompt>\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 11:35:55 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 11:35:55 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 11:35:55 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectError(PermissionError(13, 'Intento de acceso a un socket no permitido por sus permisos de acceso', None, 10013, None))
2025-06-08 11:35:55 | DEBUG    | openai._base_client | _base_client.py:976 | _request() | Encountered Exception
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    raise exc
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 78, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 124, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_backends\sync.py", line 207, in connect_tcp
    with map_exceptions(exc_map):
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 955, in _request
    response = self._client.send(
               ^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 914, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 249, in handle_request
    with map_httpcore_exceptions():
         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso
2025-06-08 11:35:55 | DEBUG    | openai._base_client | _base_client.py:988 | _request() | Raising connection error
2025-06-08 11:35:55 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: Connection error.
2025-06-08 11:35:55 | DEBUG    | app | main.py:109 | generate_acta() | Prompt:

<prompt>
  <rol>
    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.
  </rol>
  <objetivo>
    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.
  </objetivo>
  <restricciones>
    <item>No agregues información que no esté en la transcripción.</item>
    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>
    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>
    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>
    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>
  </restricciones>
  <formato_salida>
    El JSON debe contener los siguientes campos:
    {
        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",
        "fecha": "<Fecha de la reunión, si se menciona>",
        "hora": "<Hora de inicio, si se menciona>",
        "tipo_sesion": "<Tipo de sesión, 'Ordinaria' o 'Extraordinaria' exclusivamente, si se menciona>",
        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",
        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",
        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",
        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",
        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",
        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",
    }
  </formato_salida>
  <transcripcion>
    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, hoy 25/2/2025 empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números...  Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes.  Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.
  </transcripcion>
</prompt>

2025-06-08 11:35:55 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\n<prompt>\n  <rol>\n    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.\n  </rol>\n  <objetivo>\n    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.\n  </objetivo>\n  <restricciones>\n    <item>No agregues información que no esté en la transcripción.</item>\n    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>\n    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>\n    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>\n    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>\n  </restricciones>\n  <formato_salida>\n    El JSON debe contener los siguientes campos:\n    {\n        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",\n        "fecha": "<Fecha de la reunión, si se menciona>",\n        "hora": "<Hora de inicio, si se menciona>",\n        "tipo_sesion": "<Tipo de sesión, \'Ordinaria\' o \'Extraordinaria\' exclusivamente, si se menciona>",\n        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",\n        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",\n        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",\n        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",\n        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",\n        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",\n    }\n  </formato_salida>\n  <transcripcion>\n    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, hoy 25/2/2025 empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n  </transcripcion>\n</prompt>\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 11:35:55 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 11:35:55 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 11:35:55 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectError(PermissionError(13, 'Intento de acceso a un socket no permitido por sus permisos de acceso', None, 10013, None))
2025-06-08 11:35:55 | DEBUG    | openai._base_client | _base_client.py:976 | _request() | Encountered Exception
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    raise exc
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 78, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 124, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_backends\sync.py", line 207, in connect_tcp
    with map_exceptions(exc_map):
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 955, in _request
    response = self._client.send(
               ^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 914, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 249, in handle_request
    with map_httpcore_exceptions():
         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso
2025-06-08 11:35:55 | DEBUG    | openai._base_client | _base_client.py:1048 | _retry_request() | 2 retries left
2025-06-08 11:35:55 | INFO     | openai._base_client | _base_client.py:1051 | _retry_request() | Retrying request to /chat/completions in 0.408981 seconds
2025-06-08 11:35:56 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\n<prompt>\n  <rol>\n    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.\n  </rol>\n  <objetivo>\n    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.\n  </objetivo>\n  <restricciones>\n    <item>No agregues información que no esté en la transcripción.</item>\n    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>\n    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>\n    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>\n    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>\n  </restricciones>\n  <formato_salida>\n    El JSON debe contener los siguientes campos:\n    {\n        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",\n        "fecha": "<Fecha de la reunión, si se menciona>",\n        "hora": "<Hora de inicio, si se menciona>",\n        "tipo_sesion": "<Tipo de sesión, \'Ordinaria\' o \'Extraordinaria\' exclusivamente, si se menciona>",\n        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",\n        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",\n        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",\n        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",\n        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",\n        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",\n    }\n  </formato_salida>\n  <transcripcion>\n    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, hoy 25/2/2025 empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n  </transcripcion>\n</prompt>\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 11:35:56 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 11:35:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 11:35:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectError(PermissionError(13, 'Intento de acceso a un socket no permitido por sus permisos de acceso', None, 10013, None))
2025-06-08 11:35:56 | DEBUG    | openai._base_client | _base_client.py:976 | _request() | Encountered Exception
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    raise exc
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 78, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 124, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_backends\sync.py", line 207, in connect_tcp
    with map_exceptions(exc_map):
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 955, in _request
    response = self._client.send(
               ^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 914, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 249, in handle_request
    with map_httpcore_exceptions():
         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso
2025-06-08 11:35:56 | DEBUG    | openai._base_client | _base_client.py:1046 | _retry_request() | 1 retry left
2025-06-08 11:35:56 | INFO     | openai._base_client | _base_client.py:1051 | _retry_request() | Retrying request to /chat/completions in 0.926073 seconds
2025-06-08 11:35:56 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\n<prompt>\n  <rol>\n    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.\n  </rol>\n  <objetivo>\n    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.\n  </objetivo>\n  <restricciones>\n    <item>No agregues información que no esté en la transcripción.</item>\n    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>\n    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>\n    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>\n    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>\n  </restricciones>\n  <formato_salida>\n    El JSON debe contener los siguientes campos:\n    {\n        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",\n        "fecha": "<Fecha de la reunión, si se menciona>",\n        "hora": "<Hora de inicio, si se menciona>",\n        "tipo_sesion": "<Tipo de sesión, \'Ordinaria\' o \'Extraordinaria\' exclusivamente, si se menciona>",\n        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",\n        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",\n        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",\n        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",\n        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",\n        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",\n    }\n  </formato_salida>\n  <transcripcion>\n    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, hoy 25/2/2025 empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n  </transcripcion>\n</prompt>\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 11:35:56 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 11:35:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 11:35:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectError(PermissionError(13, 'Intento de acceso a un socket no permitido por sus permisos de acceso', None, 10013, None))
2025-06-08 11:35:56 | DEBUG    | openai._base_client | _base_client.py:976 | _request() | Encountered Exception
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    raise exc
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 78, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 124, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_backends\sync.py", line 207, in connect_tcp
    with map_exceptions(exc_map):
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 955, in _request
    response = self._client.send(
               ^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 914, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 249, in handle_request
    with map_httpcore_exceptions():
         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso
2025-06-08 11:35:57 | DEBUG    | openai._base_client | _base_client.py:988 | _request() | Raising connection error
2025-06-08 11:35:57 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: Connection error.
2025-06-08 11:35:57 | DEBUG    | app | main.py:109 | generate_acta() | Prompt:

<prompt>
  <rol>
    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.
  </rol>
  <objetivo>
    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.
  </objetivo>
  <restricciones>
    <item>No agregues información que no esté en la transcripción.</item>
    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>
    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>
    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>
    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>
  </restricciones>
  <formato_salida>
    El JSON debe contener los siguientes campos:
    {
        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",
        "fecha": "<Fecha de la reunión, si se menciona>",
        "hora": "<Hora de inicio, si se menciona>",
        "tipo_sesion": "<Tipo de sesión, 'Ordinaria' o 'Extraordinaria' exclusivamente, si se menciona>",
        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",
        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",
        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",
        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",
        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",
        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",
    }
  </formato_salida>
  <transcripcion>
    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, hoy 25/2/2025 empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números...  Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes.  Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.
  </transcripcion>
</prompt>

2025-06-08 11:35:57 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\n<prompt>\n  <rol>\n    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.\n  </rol>\n  <objetivo>\n    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.\n  </objetivo>\n  <restricciones>\n    <item>No agregues información que no esté en la transcripción.</item>\n    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>\n    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>\n    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>\n    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>\n  </restricciones>\n  <formato_salida>\n    El JSON debe contener los siguientes campos:\n    {\n        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",\n        "fecha": "<Fecha de la reunión, si se menciona>",\n        "hora": "<Hora de inicio, si se menciona>",\n        "tipo_sesion": "<Tipo de sesión, \'Ordinaria\' o \'Extraordinaria\' exclusivamente, si se menciona>",\n        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",\n        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",\n        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",\n        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",\n        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",\n        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",\n    }\n  </formato_salida>\n  <transcripcion>\n    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, hoy 25/2/2025 empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n  </transcripcion>\n</prompt>\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 11:35:57 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 11:35:57 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 11:35:57 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectError(PermissionError(13, 'Intento de acceso a un socket no permitido por sus permisos de acceso', None, 10013, None))
2025-06-08 11:35:57 | DEBUG    | openai._base_client | _base_client.py:976 | _request() | Encountered Exception
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    raise exc
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 78, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 124, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_backends\sync.py", line 207, in connect_tcp
    with map_exceptions(exc_map):
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 955, in _request
    response = self._client.send(
               ^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 914, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 249, in handle_request
    with map_httpcore_exceptions():
         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso
2025-06-08 11:35:57 | DEBUG    | openai._base_client | _base_client.py:1048 | _retry_request() | 2 retries left
2025-06-08 11:35:57 | INFO     | openai._base_client | _base_client.py:1051 | _retry_request() | Retrying request to /chat/completions in 0.391749 seconds
2025-06-08 11:35:57 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\n<prompt>\n  <rol>\n    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.\n  </rol>\n  <objetivo>\n    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.\n  </objetivo>\n  <restricciones>\n    <item>No agregues información que no esté en la transcripción.</item>\n    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>\n    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>\n    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>\n    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>\n  </restricciones>\n  <formato_salida>\n    El JSON debe contener los siguientes campos:\n    {\n        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",\n        "fecha": "<Fecha de la reunión, si se menciona>",\n        "hora": "<Hora de inicio, si se menciona>",\n        "tipo_sesion": "<Tipo de sesión, \'Ordinaria\' o \'Extraordinaria\' exclusivamente, si se menciona>",\n        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",\n        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",\n        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",\n        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",\n        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",\n        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",\n    }\n  </formato_salida>\n  <transcripcion>\n    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, hoy 25/2/2025 empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n  </transcripcion>\n</prompt>\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 11:35:57 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 11:35:57 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 11:35:57 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectError(PermissionError(13, 'Intento de acceso a un socket no permitido por sus permisos de acceso', None, 10013, None))
2025-06-08 11:35:57 | DEBUG    | openai._base_client | _base_client.py:976 | _request() | Encountered Exception
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    raise exc
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 78, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 124, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_backends\sync.py", line 207, in connect_tcp
    with map_exceptions(exc_map):
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 955, in _request
    response = self._client.send(
               ^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 914, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 249, in handle_request
    with map_httpcore_exceptions():
         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso
2025-06-08 11:35:57 | DEBUG    | openai._base_client | _base_client.py:1046 | _retry_request() | 1 retry left
2025-06-08 11:35:57 | INFO     | openai._base_client | _base_client.py:1051 | _retry_request() | Retrying request to /chat/completions in 0.803997 seconds
2025-06-08 11:35:58 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\n<prompt>\n  <rol>\n    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.\n  </rol>\n  <objetivo>\n    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.\n  </objetivo>\n  <restricciones>\n    <item>No agregues información que no esté en la transcripción.</item>\n    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>\n    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>\n    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>\n    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>\n  </restricciones>\n  <formato_salida>\n    El JSON debe contener los siguientes campos:\n    {\n        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",\n        "fecha": "<Fecha de la reunión, si se menciona>",\n        "hora": "<Hora de inicio, si se menciona>",\n        "tipo_sesion": "<Tipo de sesión, \'Ordinaria\' o \'Extraordinaria\' exclusivamente, si se menciona>",\n        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",\n        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",\n        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",\n        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",\n        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",\n        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",\n    }\n  </formato_salida>\n  <transcripcion>\n    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, hoy 25/2/2025 empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n  </transcripcion>\n</prompt>\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 11:35:58 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 11:35:58 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 11:35:58 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectError(PermissionError(13, 'Intento de acceso a un socket no permitido por sus permisos de acceso', None, 10013, None))
2025-06-08 11:35:58 | DEBUG    | openai._base_client | _base_client.py:976 | _request() | Encountered Exception
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 101, in map_httpcore_exceptions
    yield
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 250, in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 256, in handle_request
    raise exc from None
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection_pool.py", line 236, in handle_request
    response = connection.handle_request(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 101, in handle_request
    raise exc
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 78, in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_sync\connection.py", line 124, in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_backends\sync.py", line 207, in connect_tcp
    with map_exceptions(exc_map):
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpcore\_exceptions.py", line 14, in map_exceptions
    raise to_exc(exc) from exc
httpcore.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 955, in _request
    response = self._client.send(
               ^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 914, in send
    response = self._send_handling_auth(
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 942, in _send_handling_auth
    response = self._send_handling_redirects(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 979, in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_client.py", line 1014, in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 249, in handle_request
    with map_httpcore_exceptions():
         ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\Python312\Lib\contextlib.py", line 158, in __exit__
    self.gen.throw(value)
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_transports\default.py", line 118, in map_httpcore_exceptions
    raise mapped_exc(message) from exc
httpx.ConnectError: [WinError 10013] Intento de acceso a un socket no permitido por sus permisos de acceso
2025-06-08 11:35:58 | DEBUG    | openai._base_client | _base_client.py:988 | _request() | Raising connection error
2025-06-08 11:35:58 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: Connection error.
2025-06-08 11:49:14 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 11:49:14 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 11:49:14 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='api.gradio.app' port=443 local_address=None timeout=3 socket_options=None
2025-06-08 11:49:14 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 11:49:14 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000153ED314200>
2025-06-08 11:49:14 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.started ssl_context=<ssl.SSLContext object at 0x00000153ECFA2650> server_hostname='api.gradio.app' timeout=3
2025-06-08 11:49:14 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/initiated HTTP/1.1" 200 0
2025-06-08 11:49:14 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=None socket_options=None
2025-06-08 11:49:14 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000153ED441940>
2025-06-08 11:49:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 11:49:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 11:49:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 11:49:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 11:49:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 11:49:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 15:49:14 GMT'), (b'server', b'uvicorn'), (b'content-length', b'4'), (b'content-type', b'application/json')])
2025-06-08 11:49:14 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET http://127.0.0.1:7860/gradio_api/startup-events "HTTP/1.1 200 OK"
2025-06-08 11:49:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 11:49:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 11:49:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 11:49:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 11:49:14 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 11:49:14 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 11:49:14 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=3 socket_options=None
2025-06-08 11:49:14 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000153ED4C5850>
2025-06-08 11:49:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'HEAD']>
2025-06-08 11:49:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 11:49:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'HEAD']>
2025-06-08 11:49:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 11:49:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'HEAD']>
2025-06-08 11:49:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 15:49:14 GMT'), (b'server', b'uvicorn'), (b'content-length', b'25330'), (b'content-type', b'text/html; charset=utf-8')])
2025-06-08 11:49:14 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: HEAD http://127.0.0.1:7860/ "HTTP/1.1 200 OK"
2025-06-08 11:49:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'HEAD']>
2025-06-08 11:49:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 11:49:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 11:49:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 11:49:14 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 11:49:14 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 11:49:14 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 11:49:15 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000153ED242210>
2025-06-08 11:49:15 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 11:49:15 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 11:49:15 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 11:49:15 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 11:49:15 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 11:49:15 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 08 Jun 2025 15:49:15 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'21'), (b'Connection', b'keep-alive'), (b'Server', b'nginx/1.18.0'), (b'Access-Control-Allow-Origin', b'*')])
2025-06-08 11:49:15 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET https://api.gradio.app/pkg-version "HTTP/1.1 200 OK"
2025-06-08 11:49:15 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 11:49:15 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 11:49:15 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 11:49:15 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 11:49:15 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 11:49:15 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 11:49:15 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/launched HTTP/1.1" 200 0
2025-06-08 11:51:22 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_begin with no data
2025-06-08 11:51:22 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[57:76]
2025-06-08 11:51:22 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[78:130]
2025-06-08 11:51:22 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 11:51:22 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[132:144]
2025-06-08 11:51:22 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[146:156]
2025-06-08 11:51:22 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 11:51:22 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_headers_finished with no data
2025-06-08 11:51:22 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[160:130499]
2025-06-08 11:51:22 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 11:51:22 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 11:51:22 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 11:51:22 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:119554]
2025-06-08 11:51:22 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_end with no data
2025-06-08 11:51:22 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_end with no data
2025-06-08 11:51:24 | INFO     | app | main.py:32 | transcribe() | Transcribe: C:\Users\lin\AppData\Local\Temp\gradio\fdfadc6d4f252af4681116790d34e753832c4f3237d6506ae4892bdc7d357452\audio_prueba.mp3
2025-06-08 11:51:24 | DEBUG    | app | main.py:41 | transcribe() | Transcription: Esto es un ejemplo
2025-06-08 11:51:54 | INFO     | app | main.py:100 | generate_acta() | Generating 'Acta'
2025-06-08 11:51:54 | DEBUG    | app | main.py:109 | generate_acta() | Prompt:

<prompt>
  <rol>
    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.
  </rol>
  <objetivo>
    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.
  </objetivo>
  <restricciones>
    <item>No agregues información que no esté en la transcripción.</item>
    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>
    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>
    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>
    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>
  </restricciones>
  <formato_salida>
    El JSON debe contener los siguientes campos:
    {
        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",
        "fecha": "<Fecha de la reunión, si se menciona>",
        "hora": "<Hora de inicio, si se menciona>",
        "tipo_sesion": "<Tipo de sesión, 'Ordinaria' o 'Extraordinaria' exclusivamente, si se menciona>",
        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",
        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",
        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",
        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",
        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",
        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",
    }
  </formato_salida>
  <transcripcion>
    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números...  Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes.  Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.
  </transcripcion>
</prompt>

2025-06-08 11:51:54 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\n<prompt>\n  <rol>\n    Eres un asistente experto en análisis de transcripciones de reuniones y generación de actas estructuradas en formato JSON.\n  </rol>\n  <objetivo>\n    A partir de una transcripción informal y desordenada de una reunión, tu tarea es extraer únicamente la información explícitamente mencionada y organizarla en una estructura JSON predefinida.\n  </objetivo>\n  <restricciones>\n    <item>No agregues información que no esté en la transcripción.</item>\n    <item>No respondas preguntas, ni generes contenido nuevo o inferido.</item>\n    <item>No hagas deducciones implícitas, ni completes con lógica externa.</item>\n    <item>Evita cualquier símbolo que no sea punto (.) o coma (,).</item>\n    <item>Si un dato no está presente en la transcripción, déjalo como campo vacío.</item>\n  </restricciones>\n  <formato_salida>\n    El JSON debe contener los siguientes campos:\n    {\n        "lugar": "<Lugar donde se realizó la reunión, si se menciona>",\n        "fecha": "<Fecha de la reunión, si se menciona>",\n        "hora": "<Hora de inicio, si se menciona>",\n        "tipo_sesion": "<Tipo de sesión, \'Ordinaria\' o \'Extraordinaria\' exclusivamente, si se menciona>",\n        "orden_del_dia": "<Lista de temas que se mencionaron explícitamente como parte del orden del día. No incluir temas discutidos que no estén en la agenda>",\n        "asistencia_cargo": "<Lista de personas que asistieron y su cargo. Excluir personas que se mencione que no asistieron>",\n        "desarrollo_temas": "<Lista de temas discutidos durante la reunión.>",\n        "proposiciones": "<Lista de propuestas realizadas, indicando si fueron aprobadas (true) o rechazadas (false)>",\n        "acuerdos_adoptados": "<Lista de acciones o decisiones con un responsable y fecha límite (si está presente). La descripción debe contener solo la acción concreta.>",\n        "hora_finalizacion": "<Hora en que terminó la reunión, si se menciona>",\n    }\n  </formato_salida>\n  <transcripcion>\n    Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n  </transcripcion>\n</prompt>\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 11:51:55 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 11:51:55 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 11:51:55 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000153ED57E8D0>
2025-06-08 11:51:55 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'POST']>
2025-06-08 11:51:55 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 11:51:55 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'POST']>
2025-06-08 11:51:55 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 11:51:55 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'POST']>
2025-06-08 11:52:08 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 15:51:54 GMT'), (b'server', b'uvicorn'), (b'content-length', b'1496'), (b'content-type', b'application/json')])
2025-06-08 11:52:08 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-08 11:52:08 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'POST']>
2025-06-08 11:52:08 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 11:52:08 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 11:52:08 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 11:52:08 | DEBUG    | openai._base_client | _base_client.py:991 | _request() | HTTP Response: POST http://192.168.1.103:8000/v1/chat/completions "200 OK" Headers({'date': 'Sun, 08 Jun 2025 15:51:54 GMT', 'server': 'uvicorn', 'content-length': '1496', 'content-type': 'application/json'})
2025-06-08 11:52:08 | DEBUG    | openai._base_client | _base_client.py:999 | _request() | request_id: None
2025-06-08 11:52:08 | DEBUG    | app | main.py:112 | generate_acta() | Response:
{
  "lugar": "aula inteligente",
  "fecha": "",
  "hora": "9:15",
  "tipo_sesion": "Ordinaria",
  "asistencia_cargo": [
    {
      "nombre": "Director ejecutivo",
      "cargo": "Director ejecutivo"
    },
    {
      "nombre": "Secretaria del director",
      "cargo": "Secretaria del director"
    },
    {
      "nombre": "Directora de operaciones",
      "cargo": "" 
    },
    {
      "nombre": "director de redes",
      "cargo": ""
    }
  ],
  "orden_del_dia": [
    "ventas del trimestre"
  ],
  "desarrollo_temas": [
    "acta anterior",
    "ventas del trimestre"
  ],
  "proposiciones": [
    {
      "descripcion": "multarlos",
      "aprobada": true
    },
    {
      "descripcion": "",
      "aprobada": false
    }
  ],
  "acuerdos_adoptados": [
    {
      "descripcion": "",
      "fecha_cumplimiento": ""
    ,
    	"responsable" : ""
  	}
  ],
 	"hora_finalizacion" : ""
}
2025-06-08 11:52:08 | DEBUG    | app | main.py:115 | generate_acta() | Acta:
lugar='aula inteligente' fecha='' hora='9:15' tipo_sesion='Ordinaria' asistencia_cargo=[AsistenteCargo(nombre='Director ejecutivo', cargo='Director ejecutivo'), AsistenteCargo(nombre='Secretaria del director', cargo='Secretaria del director'), AsistenteCargo(nombre='Directora de operaciones', cargo=''), AsistenteCargo(nombre='director de redes', cargo='')] orden_del_dia=['ventas del trimestre'] desarrollo_temas=['acta anterior', 'ventas del trimestre'] proposiciones=[Proposicion(descripcion='multarlos', aprobada=True), Proposicion(descripcion='', aprobada=False)] acuerdos_adoptados=[Acuerdo(descripcion='', fecha_cumplimiento='', responsable='')] hora_finalizacion=''
2025-06-08 12:10:35 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 12:10:35 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 12:10:36 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='api.gradio.app' port=443 local_address=None timeout=3 socket_options=None
2025-06-08 12:10:36 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 12:10:37 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=None socket_options=None
2025-06-08 12:10:37 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000029C693B5160>
2025-06-08 12:10:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 12:10:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 12:10:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 12:10:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 12:10:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 12:10:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 16:10:37 GMT'), (b'server', b'uvicorn'), (b'content-length', b'4'), (b'content-type', b'application/json')])
2025-06-08 12:10:37 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET http://127.0.0.1:7860/gradio_api/startup-events "HTTP/1.1 200 OK"
2025-06-08 12:10:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 12:10:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 12:10:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 12:10:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 12:10:37 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 12:10:37 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 12:10:37 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=3 socket_options=None
2025-06-08 12:10:37 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000029C693B59D0>
2025-06-08 12:10:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'HEAD']>
2025-06-08 12:10:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 12:10:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'HEAD']>
2025-06-08 12:10:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 12:10:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'HEAD']>
2025-06-08 12:10:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 16:10:37 GMT'), (b'server', b'uvicorn'), (b'content-length', b'25330'), (b'content-type', b'text/html; charset=utf-8')])
2025-06-08 12:10:37 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: HEAD http://127.0.0.1:7860/ "HTTP/1.1 200 OK"
2025-06-08 12:10:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'HEAD']>
2025-06-08 12:10:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 12:10:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 12:10:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 12:10:37 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 12:10:37 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 12:10:37 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 12:10:42 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectTimeout(TimeoutError('timed out'))
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_begin with no data
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[57:76]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[78:123]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[125:137]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[139:163]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_headers_finished with no data
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[167:130520]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:102243]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_end with no data
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_end with no data
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_begin with no data
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[57:76]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[78:123]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[125:137]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[139:163]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_headers_finished with no data
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[167:97752]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:3939]
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_end with no data
2025-06-08 12:12:03 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_end with no data
2025-06-08 12:12:04 | INFO     | app | main.py:32 | transcribe() | Transcribe: C:\Users\lin\AppData\Local\Temp\gradio\beccef48737fac3f5deceeb573ebf14965c51482d941d271ec3056dd93eb2bb8\audio.wav
2025-06-08 12:12:04 | DEBUG    | app | main.py:41 | transcribe() | Transcription: Esto es un ejemplo
2025-06-08 12:12:13 | INFO     | app | main.py:100 | generate_acta() | Generating 'Acta'
2025-06-08 12:12:13 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: '\n     "lugar"'
2025-06-08 12:12:13 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: '\n     "lugar"'
2025-06-08 12:12:13 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: '\n     "lugar"'
2025-06-08 12:15:09 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 12:15:09 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 12:15:09 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='api.gradio.app' port=443 local_address=None timeout=3 socket_options=None
2025-06-08 12:15:10 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 12:15:11 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=None socket_options=None
2025-06-08 12:15:11 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000257B377D7C0>
2025-06-08 12:15:11 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 12:15:11 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 12:15:11 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 12:15:11 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 12:15:11 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 12:15:11 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 16:15:11 GMT'), (b'server', b'uvicorn'), (b'content-length', b'4'), (b'content-type', b'application/json')])
2025-06-08 12:15:11 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET http://127.0.0.1:7860/gradio_api/startup-events "HTTP/1.1 200 OK"
2025-06-08 12:15:11 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 12:15:11 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 12:15:11 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 12:15:11 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 12:15:11 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 12:15:11 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 12:15:11 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=3 socket_options=None
2025-06-08 12:15:11 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000257B3809E80>
2025-06-08 12:15:11 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'HEAD']>
2025-06-08 12:15:11 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 12:15:11 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'HEAD']>
2025-06-08 12:15:11 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 12:15:11 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'HEAD']>
2025-06-08 12:15:12 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 16:15:11 GMT'), (b'server', b'uvicorn'), (b'content-length', b'25331'), (b'content-type', b'text/html; charset=utf-8')])
2025-06-08 12:15:12 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: HEAD http://127.0.0.1:7860/ "HTTP/1.1 200 OK"
2025-06-08 12:15:12 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'HEAD']>
2025-06-08 12:15:12 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 12:15:12 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 12:15:12 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 12:15:12 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 12:15:12 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 12:15:12 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 12:15:15 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.failed exception=ConnectTimeout(TimeoutError('timed out'))
2025-06-08 12:15:21 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_begin with no data
2025-06-08 12:15:21 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[57:76]
2025-06-08 12:15:21 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[78:130]
2025-06-08 12:15:21 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 12:15:21 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[132:144]
2025-06-08 12:15:21 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[146:156]
2025-06-08 12:15:21 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 12:15:21 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_headers_finished with no data
2025-06-08 12:15:21 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[160:130498]
2025-06-08 12:15:21 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:15:21 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:15:21 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:15:21 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:119555]
2025-06-08 12:15:21 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_end with no data
2025-06-08 12:15:21 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_end with no data
2025-06-08 12:15:23 | INFO     | app | main.py:32 | transcribe() | Transcribe: C:\Users\lin\AppData\Local\Temp\gradio\fdfadc6d4f252af4681116790d34e753832c4f3237d6506ae4892bdc7d357452\audio_prueba.mp3
2025-06-08 12:15:23 | DEBUG    | app | main.py:41 | transcribe() | Transcription: Esto es un ejemplo
2025-06-08 12:15:31 | INFO     | app | main.py:100 | generate_acta() | Generating 'Acta'
2025-06-08 12:15:31 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: '\n     "lugar"'
2025-06-08 12:15:31 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: '\n     "lugar"'
2025-06-08 12:15:31 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: '\n     "lugar"'
2025-06-08 12:16:34 | INFO     | app | main.py:100 | generate_acta() | Generating 'Acta'
2025-06-08 12:16:34 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: '\n     "lugar"'
2025-06-08 12:16:34 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: '\n     "lugar"'
2025-06-08 12:16:34 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: '\n     "lugar"'
2025-06-08 12:17:25 | INFO     | app | main.py:100 | generate_acta() | Generating 'Acta'
2025-06-08 12:17:25 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: '\n     "lugar"'
2025-06-08 12:17:25 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: '\n     "lugar"'
2025-06-08 12:17:25 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: '\n     "lugar"'
2025-06-08 12:20:25 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 12:20:25 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 12:20:26 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 12:20:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='api.gradio.app' port=443 local_address=None timeout=3 socket_options=None
2025-06-08 12:20:26 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/initiated HTTP/1.1" 200 0
2025-06-08 12:20:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000028347B29BB0>
2025-06-08 12:20:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.started ssl_context=<ssl.SSLContext object at 0x00000283476AD6D0> server_hostname='api.gradio.app' timeout=3
2025-06-08 12:20:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=None socket_options=None
2025-06-08 12:20:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000028347C54EC0>
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 16:20:26 GMT'), (b'server', b'uvicorn'), (b'content-length', b'4'), (b'content-type', b'application/json')])
2025-06-08 12:20:26 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET http://127.0.0.1:7860/gradio_api/startup-events "HTTP/1.1 200 OK"
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 12:20:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 12:20:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 12:20:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=3 socket_options=None
2025-06-08 12:20:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000028347C55A60>
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'HEAD']>
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'HEAD']>
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'HEAD']>
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 16:20:26 GMT'), (b'server', b'uvicorn'), (b'content-length', b'25331'), (b'content-type', b'text/html; charset=utf-8')])
2025-06-08 12:20:26 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: HEAD http://127.0.0.1:7860/ "HTTP/1.1 200 OK"
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'HEAD']>
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 12:20:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 12:20:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 12:20:26 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 12:20:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000283478184D0>
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 08 Jun 2025 16:20:26 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'21'), (b'Connection', b'keep-alive'), (b'Server', b'nginx/1.18.0'), (b'Access-Control-Allow-Origin', b'*')])
2025-06-08 12:20:26 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET https://api.gradio.app/pkg-version "HTTP/1.1 200 OK"
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 12:20:26 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 12:20:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 12:20:26 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 12:20:27 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/launched HTTP/1.1" 200 0
2025-06-08 12:20:44 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_begin with no data
2025-06-08 12:20:44 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[42:61]
2025-06-08 12:20:44 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[63:115]
2025-06-08 12:20:44 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 12:20:44 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[117:129]
2025-06-08 12:20:44 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[131:141]
2025-06-08 12:20:44 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 12:20:44 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_headers_finished with no data
2025-06-08 12:20:44 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[145:131072]
2025-06-08 12:20:44 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:20:44 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:20:44 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:20:44 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:118966]
2025-06-08 12:20:44 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_end with no data
2025-06-08 12:20:44 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_end with no data
2025-06-08 12:20:45 | INFO     | app | main.py:32 | transcribe() | Transcribe: C:\Users\lin\AppData\Local\Temp\gradio\fdfadc6d4f252af4681116790d34e753832c4f3237d6506ae4892bdc7d357452\audio_prueba.mp3
2025-06-08 12:20:45 | DEBUG    | app | main.py:41 | transcribe() | Transcription: Esto es un ejemplo
2025-06-08 12:20:51 | INFO     | app | main.py:100 | generate_acta() | Generating 'Acta'
2025-06-08 12:20:51 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: '\n     "lugar"'
2025-06-08 12:20:51 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: '\n     "lugar"'
2025-06-08 12:20:51 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: '\n     "lugar"'
2025-06-08 12:25:08 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 12:25:08 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 12:25:09 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 12:25:09 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='api.gradio.app' port=443 local_address=None timeout=3 socket_options=None
2025-06-08 12:25:09 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/initiated HTTP/1.1" 200 0
2025-06-08 12:25:09 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000022F3E1245F0>
2025-06-08 12:25:09 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.started ssl_context=<ssl.SSLContext object at 0x0000022F3DBA96D0> server_hostname='api.gradio.app' timeout=3
2025-06-08 12:25:10 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=None socket_options=None
2025-06-08 12:25:10 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000022F3E144CE0>
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 16:25:09 GMT'), (b'server', b'uvicorn'), (b'content-length', b'4'), (b'content-type', b'application/json')])
2025-06-08 12:25:10 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET http://127.0.0.1:7860/gradio_api/startup-events "HTTP/1.1 200 OK"
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 12:25:10 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 12:25:10 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 12:25:10 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=3 socket_options=None
2025-06-08 12:25:10 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000022F3E145970>
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'HEAD']>
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'HEAD']>
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'HEAD']>
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 16:25:09 GMT'), (b'server', b'uvicorn'), (b'content-length', b'25331'), (b'content-type', b'text/html; charset=utf-8')])
2025-06-08 12:25:10 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: HEAD http://127.0.0.1:7860/ "HTTP/1.1 200 OK"
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'HEAD']>
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 12:25:10 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 12:25:10 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 12:25:10 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 12:25:10 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000022F3E1245C0>
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 08 Jun 2025 16:25:10 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'21'), (b'Connection', b'keep-alive'), (b'Server', b'nginx/1.18.0'), (b'Access-Control-Allow-Origin', b'*')])
2025-06-08 12:25:10 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET https://api.gradio.app/pkg-version "HTTP/1.1 200 OK"
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 12:25:10 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 12:25:10 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 12:25:10 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 12:25:10 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/launched HTTP/1.1" 200 0
2025-06-08 12:25:18 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_begin with no data
2025-06-08 12:25:18 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[42:61]
2025-06-08 12:25:18 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[63:115]
2025-06-08 12:25:18 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 12:25:18 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[117:129]
2025-06-08 12:25:18 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[131:141]
2025-06-08 12:25:18 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 12:25:18 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_headers_finished with no data
2025-06-08 12:25:18 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[145:81920]
2025-06-08 12:25:18 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:114688]
2025-06-08 12:25:18 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:25:18 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:25:18 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:25:18 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:53430]
2025-06-08 12:25:18 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_end with no data
2025-06-08 12:25:18 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_end with no data
2025-06-08 12:25:19 | INFO     | app | main.py:32 | transcribe() | Transcribe: C:\Users\lin\AppData\Local\Temp\gradio\fdfadc6d4f252af4681116790d34e753832c4f3237d6506ae4892bdc7d357452\audio_prueba.mp3
2025-06-08 12:25:19 | DEBUG    | app | main.py:41 | transcribe() | Transcription: Esto es un ejemplo
2025-06-08 12:25:26 | INFO     | app | main.py:100 | generate_acta() | Generating 'Acta'
2025-06-08 12:25:26 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: '\n         "nombre_apellidos"'
2025-06-08 12:25:26 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: '\n         "nombre_apellidos"'
2025-06-08 12:25:26 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: '\n         "nombre_apellidos"'
2025-06-08 12:27:15 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 12:27:15 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 12:27:16 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='api.gradio.app' port=443 local_address=None timeout=3 socket_options=None
2025-06-08 12:27:16 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001EDCDCD9C10>
2025-06-08 12:27:16 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.started ssl_context=<ssl.SSLContext object at 0x000001EDCDAF5FD0> server_hostname='api.gradio.app' timeout=3
2025-06-08 12:27:16 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/initiated HTTP/1.1" 200 0
2025-06-08 12:27:16 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 12:27:17 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001EDCDCD9B50>
2025-06-08 12:27:17 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 12:27:17 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 12:27:17 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 12:27:17 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 12:27:17 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 12:27:17 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 08 Jun 2025 16:27:17 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'21'), (b'Connection', b'keep-alive'), (b'Server', b'nginx/1.18.0'), (b'Access-Control-Allow-Origin', b'*')])
2025-06-08 12:27:17 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET https://api.gradio.app/pkg-version "HTTP/1.1 200 OK"
2025-06-08 12:27:17 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 12:27:17 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 12:27:17 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 12:27:17 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 12:27:17 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 12:27:17 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 12:27:18 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=None socket_options=None
2025-06-08 12:27:18 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001EDCE0120C0>
2025-06-08 12:27:18 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 12:27:18 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 12:27:18 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 12:27:18 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 12:27:18 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 12:27:18 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 16:27:17 GMT'), (b'server', b'uvicorn'), (b'content-length', b'4'), (b'content-type', b'application/json')])
2025-06-08 12:27:18 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET http://127.0.0.1:7860/gradio_api/startup-events "HTTP/1.1 200 OK"
2025-06-08 12:27:18 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 12:27:18 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 12:27:18 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 12:27:18 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 12:27:18 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 12:27:18 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 12:27:18 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=3 socket_options=None
2025-06-08 12:27:18 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001EDCE0134A0>
2025-06-08 12:27:18 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'HEAD']>
2025-06-08 12:27:18 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 12:27:18 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'HEAD']>
2025-06-08 12:27:18 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 12:27:18 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'HEAD']>
2025-06-08 12:27:18 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 16:27:17 GMT'), (b'server', b'uvicorn'), (b'content-length', b'25331'), (b'content-type', b'text/html; charset=utf-8')])
2025-06-08 12:27:18 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: HEAD http://127.0.0.1:7860/ "HTTP/1.1 200 OK"
2025-06-08 12:27:18 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'HEAD']>
2025-06-08 12:27:18 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 12:27:18 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 12:27:18 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 12:27:18 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 12:27:18 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 12:27:18 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 12:27:19 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/launched HTTP/1.1" 200 0
2025-06-08 12:27:26 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_begin with no data
2025-06-08 12:27:26 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[42:61]
2025-06-08 12:27:26 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[63:115]
2025-06-08 12:27:26 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 12:27:26 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[117:129]
2025-06-08 12:27:26 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[131:141]
2025-06-08 12:27:26 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 12:27:26 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_headers_finished with no data
2025-06-08 12:27:26 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[145:81920]
2025-06-08 12:27:26 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:27:26 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:27:26 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:27:26 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:27:26 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:37046]
2025-06-08 12:27:26 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_end with no data
2025-06-08 12:27:26 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_end with no data
2025-06-08 12:27:31 | INFO     | app | main.py:32 | transcribe() | Transcribe: C:\Users\lin\AppData\Local\Temp\gradio\fdfadc6d4f252af4681116790d34e753832c4f3237d6506ae4892bdc7d357452\audio_prueba.mp3
2025-06-08 12:27:31 | DEBUG    | app | main.py:41 | transcribe() | Transcription: Esto es un ejemplo
2025-06-08 12:27:44 | INFO     | app | main.py:100 | generate_acta() | Generating 'Acta'
2025-06-08 12:38:31 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 12:38:31 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 12:38:32 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 12:38:32 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='api.gradio.app' port=443 local_address=None timeout=3 socket_options=None
2025-06-08 12:38:32 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001F5B3201220>
2025-06-08 12:38:32 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.started ssl_context=<ssl.SSLContext object at 0x000001F5B2CB56D0> server_hostname='api.gradio.app' timeout=3
2025-06-08 12:38:33 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/initiated HTTP/1.1" 200 0
2025-06-08 12:38:33 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001F5B30D3530>
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 12:38:33 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=None socket_options=None
2025-06-08 12:38:33 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001F5B3254AA0>
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 16:38:32 GMT'), (b'server', b'uvicorn'), (b'content-length', b'4'), (b'content-type', b'application/json')])
2025-06-08 12:38:33 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET http://127.0.0.1:7860/gradio_api/startup-events "HTTP/1.1 200 OK"
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 12:38:33 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 12:38:33 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 12:38:33 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=3 socket_options=None
2025-06-08 12:38:33 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001F5B3255940>
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'HEAD']>
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'HEAD']>
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'HEAD']>
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 16:38:32 GMT'), (b'server', b'uvicorn'), (b'content-length', b'25330'), (b'content-type', b'text/html; charset=utf-8')])
2025-06-08 12:38:33 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: HEAD http://127.0.0.1:7860/ "HTTP/1.1 200 OK"
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'HEAD']>
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 12:38:33 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 12:38:33 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 12:38:33 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 08 Jun 2025 16:38:33 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'21'), (b'Connection', b'keep-alive'), (b'Server', b'nginx/1.18.0'), (b'Access-Control-Allow-Origin', b'*')])
2025-06-08 12:38:33 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET https://api.gradio.app/pkg-version "HTTP/1.1 200 OK"
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 12:38:33 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 12:38:33 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 12:38:33 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 12:38:34 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/launched HTTP/1.1" 200 0
2025-06-08 12:38:52 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_begin with no data
2025-06-08 12:38:52 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[42:61]
2025-06-08 12:38:52 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[63:115]
2025-06-08 12:38:52 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 12:38:52 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[117:129]
2025-06-08 12:38:52 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[131:141]
2025-06-08 12:38:52 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 12:38:52 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_headers_finished with no data
2025-06-08 12:38:52 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[145:81920]
2025-06-08 12:38:52 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:38:52 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:38:52 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:38:52 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 12:38:52 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:37046]
2025-06-08 12:38:52 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_end with no data
2025-06-08 12:38:52 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_end with no data
2025-06-08 12:38:55 | INFO     | app | main.py:32 | transcribe() | Transcribe: C:\Users\lin\AppData\Local\Temp\gradio\fdfadc6d4f252af4681116790d34e753832c4f3237d6506ae4892bdc7d357452\audio_prueba.mp3
2025-06-08 12:38:55 | DEBUG    | app | main.py:41 | transcribe() | Transcription: Esto es un ejemplo
2025-06-08 12:39:15 | INFO     | app | main.py:100 | generate_acta() | Generating 'Acta'
2025-06-08 12:39:15 | DEBUG    | app | main.py:109 | generate_acta() | Prompt:

Eres un experto encargado de generar un acta de reunión en formato JSON estructurado a partir de una transcripción de audio desordenada o informal. El texto puede incluir interrupciones, repeticiones, errores de lenguaje y contenido hablado de manera natural.Tu trabajo es identificar y extraer correctamente la información clave de la reunión.No agregues informacion, deducciones, no respondas preguntas, evita agregar simbolos que no sean (.) y (,)
- "lugar": Lugar donde se realizó la reunión si se menciona. Si no se menciona, dejar vacío.
- "fecha": Fecha de la reunión si se menciona. Si no se menciona, dejar vacío.
- "hora": Hora de inicio de la reunión si se menciona.
- "tipo_sesion": Puede ser "Ordinaria", "Extraordinaria" u otro tipo si se menciona explícitamente.
- "orden_del_dia": Lista de temas principales de la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.
- "asistencia_cargo": Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.
- "desarrollo_temas": Lista de temas discutidos con una pequeña síntesis para cada uno.
- "proposiciones": Todas las propuestas realizadas, indicando si fueron aprobadas o no. Generalmente se dice que se aprueban o se vota sobre ellas.
- "acuerdos_adoptados": Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. El campo `descripcion` debe contener solo la **tarea concreta o acción a realizar**, no el nombre del responsable. El responsable debe ir únicamente en el campo `responsable`.
- "hora_finalizacion": Hora en la que terminó la reunión si se menciona.

Aqui tienes la transcripción que debes procesar:
Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números...  Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes.  Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.
/no_think

2025-06-08 12:39:15 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\nEres un experto encargado de generar un acta de reunión en formato JSON estructurado a partir de una transcripción de audio desordenada o informal. El texto puede incluir interrupciones, repeticiones, errores de lenguaje y contenido hablado de manera natural.Tu trabajo es identificar y extraer correctamente la información clave de la reunión.No agregues informacion, deducciones, no respondas preguntas, evita agregar simbolos que no sean (.) y (,)\n- "lugar": Lugar donde se realizó la reunión si se menciona. Si no se menciona, dejar vacío.\n- "fecha": Fecha de la reunión si se menciona. Si no se menciona, dejar vacío.\n- "hora": Hora de inicio de la reunión si se menciona.\n- "tipo_sesion": Puede ser "Ordinaria", "Extraordinaria" u otro tipo si se menciona explícitamente.\n- "orden_del_dia": Lista de temas principales de la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.\n- "asistencia_cargo": Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.\n- "desarrollo_temas": Lista de temas discutidos con una pequeña síntesis para cada uno.\n- "proposiciones": Todas las propuestas realizadas, indicando si fueron aprobadas o no. Generalmente se dice que se aprueban o se vota sobre ellas.\n- "acuerdos_adoptados": Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. El campo `descripcion` debe contener solo la **tarea concreta o acción a realizar**, no el nombre del responsable. El responsable debe ir únicamente en el campo `responsable`.\n- "hora_finalizacion": Hora en la que terminó la reunión si se menciona.\n\nAqui tienes la transcripción que debes procesar:\nBueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n/no_think\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 12:39:15 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 12:39:15 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 12:39:15 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001F5B3314A10>
2025-06-08 12:39:15 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'POST']>
2025-06-08 12:39:15 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 12:39:15 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'POST']>
2025-06-08 12:39:15 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 12:39:15 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'POST']>
2025-06-08 12:39:22 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 16:39:15 GMT'), (b'server', b'uvicorn'), (b'content-length', b'1980'), (b'content-type', b'application/json')])
2025-06-08 12:39:22 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-08 12:39:22 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'POST']>
2025-06-08 12:39:22 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 12:39:22 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 12:39:22 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 12:39:22 | DEBUG    | openai._base_client | _base_client.py:991 | _request() | HTTP Response: POST http://192.168.1.103:8000/v1/chat/completions "200 OK" Headers({'date': 'Sun, 08 Jun 2025 16:39:15 GMT', 'server': 'uvicorn', 'content-length': '1980', 'content-type': 'application/json'})
2025-06-08 12:39:22 | DEBUG    | openai._base_client | _base_client.py:999 | _request() | request_id: None
2025-06-08 12:39:22 | DEBUG    | app | main.py:112 | generate_acta() | Response:
{
  "lugar": "aula inteligente",
  "fecha": "",
  "hora": "9:15",
  "tipo_sesion": "Ordinaria",
  "asistencia_cargo": [
    {
      "nombre": "Director ejecutivo",
      "cargo": "Director ejecutivo"
    },
    {
      "nombre": "Secretaria del director",
      "cargo": "Secretaria del director"
    },
    {
      "nombre": "Directora de operaciones",
      "cargo": "Directora de operaciones"
    },
    {
      "nombre": "Director de redes",
      "cargo": "Director de redes"
    }
  ],
  "orden_del_dia": [
    "ventas del trimestre"
  ],
  "desarrollo_temas": [
    "Se discutió la actualización de la fecha del acta anterior, cambiando de 2023 a 2024.",
    "Se analizó el desempeño de las ventas del trimestre, que mostraron una caída del 12% y problemas con los envíos."
  ],
  "proposiciones": [
    {
      "descripcion": "Aplicar una multa a los responsables por los retrasos en los envíos.",
      "aprobada": true
    },
    {
      "descripcion": "Preparar una propuesta para el mes de mayo.",
      "aprobada": false
    }
  ],
  "acuerdos_adoptados": [
    {
      "descripcion": "Aplicar una multa a los responsables por los retrasos en los envíos.",
      "fecha_cumplimiento": "",
      "responsable": ""
    },
    {
      "descripcion": "",
      "fecha_cumplimiento": "",
      "responsable": ""
    }
  ],
  "hora_finalizacion": ""
}
2025-06-08 12:39:22 | DEBUG    | app | main.py:115 | generate_acta() | Acta:
lugar='aula inteligente' fecha='' hora='9:15' tipo_sesion='Ordinaria' asistencia_cargo=[AsistenteCargo(nombre='Director ejecutivo', cargo='Director ejecutivo'), AsistenteCargo(nombre='Secretaria del director', cargo='Secretaria del director'), AsistenteCargo(nombre='Directora de operaciones', cargo='Directora de operaciones'), AsistenteCargo(nombre='Director de redes', cargo='Director de redes')] orden_del_dia=['ventas del trimestre'] desarrollo_temas=['Se discutió la actualización de la fecha del acta anterior, cambiando de 2023 a 2024.', 'Se analizó el desempeño de las ventas del trimestre, que mostraron una caída del 12% y problemas con los envíos.'] proposiciones=[Proposicion(descripcion='Aplicar una multa a los responsables por los retrasos en los envíos.', aprobada=True), Proposicion(descripcion='Preparar una propuesta para el mes de mayo.', aprobada=False)] acuerdos_adoptados=[Acuerdo(descripcion='Aplicar una multa a los responsables por los retrasos en los envíos.', fecha_cumplimiento='', responsable=''), Acuerdo(descripcion='', fecha_cumplimiento='', responsable='')] hora_finalizacion=''
2025-06-08 13:08:07 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 13:08:07 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 13:08:07 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='api.gradio.app' port=443 local_address=None timeout=3 socket_options=None
2025-06-08 13:08:08 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/initiated HTTP/1.1" 200 0
2025-06-08 13:08:08 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 13:08:09 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000224EB592030>
2025-06-08 13:08:09 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.started ssl_context=<ssl.SSLContext object at 0x00000224EB30D6D0> server_hostname='api.gradio.app' timeout=3
2025-06-08 13:08:09 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=None socket_options=None
2025-06-08 13:08:09 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000224EB8B4E90>
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 17:08:08 GMT'), (b'server', b'uvicorn'), (b'content-length', b'4'), (b'content-type', b'application/json')])
2025-06-08 13:08:09 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET http://127.0.0.1:7860/gradio_api/startup-events "HTTP/1.1 200 OK"
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:08:09 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 13:08:09 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 13:08:09 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=3 socket_options=None
2025-06-08 13:08:09 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000224EB8B5B80>
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'HEAD']>
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'HEAD']>
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'HEAD']>
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 17:08:08 GMT'), (b'server', b'uvicorn'), (b'content-length', b'25330'), (b'content-type', b'text/html; charset=utf-8')])
2025-06-08 13:08:09 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: HEAD http://127.0.0.1:7860/ "HTTP/1.1 200 OK"
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'HEAD']>
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:08:09 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 13:08:09 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 13:08:09 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 13:08:09 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000224EB6243B0>
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 08 Jun 2025 17:08:09 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'21'), (b'Connection', b'keep-alive'), (b'Server', b'nginx/1.18.0'), (b'Access-Control-Allow-Origin', b'*')])
2025-06-08 13:08:09 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET https://api.gradio.app/pkg-version "HTTP/1.1 200 OK"
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:08:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:08:09 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 13:08:09 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 13:08:09 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/launched HTTP/1.1" 200 0
2025-06-08 13:08:16 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_begin with no data
2025-06-08 13:08:16 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[42:61]
2025-06-08 13:08:16 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[63:115]
2025-06-08 13:08:16 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 13:08:16 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[117:129]
2025-06-08 13:08:16 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[131:141]
2025-06-08 13:08:16 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 13:08:16 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_headers_finished with no data
2025-06-08 13:08:16 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[145:81920]
2025-06-08 13:08:16 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:114688]
2025-06-08 13:08:16 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:49152]
2025-06-08 13:08:16 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:81920]
2025-06-08 13:08:16 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:81920]
2025-06-08 13:08:16 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 13:08:16 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:102582]
2025-06-08 13:08:16 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_end with no data
2025-06-08 13:08:16 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_end with no data
2025-06-08 13:08:18 | INFO     | app | main.py:32 | transcribe() | Transcribe: C:\Users\lin\AppData\Local\Temp\gradio\fdfadc6d4f252af4681116790d34e753832c4f3237d6506ae4892bdc7d357452\audio_prueba.mp3
2025-06-08 13:08:18 | DEBUG    | app | main.py:41 | transcribe() | Transcription: Esto es un ejemplo
2025-06-08 13:09:01 | INFO     | app | main.py:100 | generate_acta() | Generating 'Acta'
2025-06-08 13:09:01 | DEBUG    | app | main.py:109 | generate_acta() | Prompt:

Eres un asistente experto en generar actas de reuniones a partir de transcripciones habladas informales. 
La transcripción puede incluir lenguaje natural, desordenado, repeticiones, interrupciones o errores. 
Tu tarea es analizar cuidadosamente el contenido y extraer la información clave para estructurarla en un JSON con los siguientes campos:

Instrucciones generales:
- No inventes ni asumas información que no esté explícitamente dicha.
- No incluyas símbolos que no sean coma (,) o punto (.).
- Si una información no está presente o no se puede deducir con certeza, deja el campo vacío o como lista vacía según corresponda.
- Nunca respondas con explicaciones ni comentes tus decisiones. Solo genera el JSON estructurado.

Campos explicados:
"lugar": Nombre del lugar donde ocurre la reunión. Solo si se menciona explícitamente (ej: "en el aula B", "en la oficina").
"fecha": Fecha en formato libre, si se menciona de manera explícita (ej:"15 de abril").
"hora": Hora exacta de inicio de la reunión si se menciona (ej: "son las 9:00 am"), entonces la hora es 9:00 am.
"tipo_sesion": Palabra que indique el tipo de sesión, como "Ordinaria", "Extraordinaria" u otra, solo si se dice explícitamente.
"orden_del_dia": Lista de temas que fueron anunciados como el orden del día. Solo extrae lo que se dijo antes de empezar la discusión de los temas.
"asistencia_cargo": Lista de personas que estuvieron presentes representada en dos campos:  
    "nombre_apellidos": Nombre y apellidos de las personas explícitamente presentes en la reunión, no incluyas personas ausentes aunque fueran mencionadas.
    "cargo": El cargo o puesto de trabajo que tiene esa persona si se menciona, si no se menciona déjalo en blanco.
"desarrollo_temas": Lista de ideas discutidas o tratadas. Resume cada tema o punto debatido, sin agregar interpretaciones. Usa frases claras y concisas.
"proposiciones": Lista de propuestas que fueron planteadas en la reunión. Indica si fueron aprobadas (true) o no (false). Una propuesta puede comenzar con frases como "propongo", "sugiero", o derivarse de una votación.
"acuerdos_adoptados": Toda acción concreta que fue acordada, con tres campos:
    1."descripcion": Acción específica que se debe realizar.
    2."fecha_cumplimiento": Fecha límite o expresión temporal si se menciona (ej: "antes del viernes", "hoy").
    3."responsable": Persona a cargo de ejecutar esa acción.
"hora_finalizacion": Hora en la que terminó la reunión si se menciona claramente (ej: "se levanta la sesión, son las 10:40") entonces la hora de finalización es 10:40.
Aqui tienes la transcripción que debes procesar:
 Bueno, ya parece que estamos todos. Son como las 8:30, y estamos reunidos virtualmente en la sesión ordinaria del día
Jorge Avila estás ahi?, si, estoy en mi escritorio, creo que la conexión se me había caído. Lucía Morales está en línea, dile que entre. A Pablo no lo veo, pero dijo anoche que tenía problemas con el transporte. jefa Clara Gonzales ¿está?, si aquí estoy, quería decirles que estoy un poco apurada
Empezamos hablando de lo de ayer... lo de los formularios. Se habló bastante, pero no se llegó a algo concreto. Creo que se comentó que deberían unificarse, pero nadie quiso tomar eso de momento, ¿unificarse?, si que los pongan todos juntos, pero eso va a ser ilegible señores, ¿no están de acuerdo con unificarlos?, no no eso no se resuelve asi, hay que ver que hacemos. Lo de los turnos de guardia, alguien dijo por ahi que están mal asignados. Con lo del los formularios deberíamos reorganizarlos y ya, Lucia ya habíamos cambiado de tema, ¿y que?, pero ese tema no había cerrado, estoy proponiendo que se puede hacer. Clara, ¿que piensas tu?, no a ver hay que preguntarle a la jefa. A mi me parece que deberíamos digitalizar los informes mensuales. Y eso que tiene que ver, estamos hablando de la guardia. No, pero si están hablando de los formulario, estas muy interesado en la guardia Jorge, claro si llevo 3 mese haciendo guardia casi todos los fines de semana, eso ya o puede ser. La guardia yo la voy a programar este mes y le voy a dar los turnos a cada uno justamente, ¿ok?. Y respecto a los formulario, vamos a hacer lo que dice Lucia, con reorganizarlos es suficiente, no se compliquen tanto, todo el mundo ¿deacuerdo?, si , si. Ya seguimos.
Caballero alguien se ha fijado en lo del sistema de acceso. No Jorge, eso no es responsabilidad de nosotros. Ah no?, pero si el otro día el secretario del director me entrego una planilla grandísima que ponía que era sanción con los que estén entrando con cuenta administrador. Pero eso ya lo cambiaron, nosotros necesitamos ese acceso para trabajar, por si acaso, jorge, ve mañana a hablar personalmente con el director para ver si resolvemos eso, ¿vale?, Si. 
Que va, la conexión esta malísima. Tengo que hablar con alguien para que nos ponga mejor internet, así no se puede. ¿para que vas a hacer eso Clara? ya tienes demasiadas responsabilidades. Eso no es ahora, cuando yo me desocupe lo hago. Vamos a seguir. Los archivos antiguos que están en el almacén hay que moverlos de ahi, porque se van a echar a perder, Lucia y Jorge dedíquense a hacer eso hoy, llamen a los nuevos trabajadores para que los ayuden.  La próxima reunion como siempre, es la semana que viene, ya son las 10 de la mañana, me tengo que ir, ya vamos a terminar.

/no_think

2025-06-08 13:09:01 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\nEres un asistente experto en generar actas de reuniones a partir de transcripciones habladas informales. \nLa transcripción puede incluir lenguaje natural, desordenado, repeticiones, interrupciones o errores. \nTu tarea es analizar cuidadosamente el contenido y extraer la información clave para estructurarla en un JSON con los siguientes campos:\n\nInstrucciones generales:\n- No inventes ni asumas información que no esté explícitamente dicha.\n- No incluyas símbolos que no sean coma (,) o punto (.).\n- Si una información no está presente o no se puede deducir con certeza, deja el campo vacío o como lista vacía según corresponda.\n- Nunca respondas con explicaciones ni comentes tus decisiones. Solo genera el JSON estructurado.\n\nCampos explicados:\n"lugar": Nombre del lugar donde ocurre la reunión. Solo si se menciona explícitamente (ej: "en el aula B", "en la oficina").\n"fecha": Fecha en formato libre, si se menciona de manera explícita (ej:"15 de abril").\n"hora": Hora exacta de inicio de la reunión si se menciona (ej: "son las 9:00 am"), entonces la hora es 9:00 am.\n"tipo_sesion": Palabra que indique el tipo de sesión, como "Ordinaria", "Extraordinaria" u otra, solo si se dice explícitamente.\n"orden_del_dia": Lista de temas que fueron anunciados como el orden del día. Solo extrae lo que se dijo antes de empezar la discusión de los temas.\n"asistencia_cargo": Lista de personas que estuvieron presentes representada en dos campos:  \n    "nombre_apellidos": Nombre y apellidos de las personas explícitamente presentes en la reunión, no incluyas personas ausentes aunque fueran mencionadas.\n    "cargo": El cargo o puesto de trabajo que tiene esa persona si se menciona, si no se menciona déjalo en blanco.\n"desarrollo_temas": Lista de ideas discutidas o tratadas. Resume cada tema o punto debatido, sin agregar interpretaciones. Usa frases claras y concisas.\n"proposiciones": Lista de propuestas que fueron planteadas en la reunión. Indica si fueron aprobadas (true) o no (false). Una propuesta puede comenzar con frases como "propongo", "sugiero", o derivarse de una votación.\n"acuerdos_adoptados": Toda acción concreta que fue acordada, con tres campos:\n    1."descripcion": Acción específica que se debe realizar.\n    2."fecha_cumplimiento": Fecha límite o expresión temporal si se menciona (ej: "antes del viernes", "hoy").\n    3."responsable": Persona a cargo de ejecutar esa acción.\n"hora_finalizacion": Hora en la que terminó la reunión si se menciona claramente (ej: "se levanta la sesión, son las 10:40") entonces la hora de finalización es 10:40.\nAqui tienes la transcripción que debes procesar:\n Bueno, ya parece que estamos todos. Son como las 8:30, y estamos reunidos virtualmente en la sesión ordinaria del día\nJorge Avila estás ahi?, si, estoy en mi escritorio, creo que la conexión se me había caído. Lucía Morales está en línea, dile que entre. A Pablo no lo veo, pero dijo anoche que tenía problemas con el transporte. jefa Clara Gonzales ¿está?, si aquí estoy, quería decirles que estoy un poco apurada\nEmpezamos hablando de lo de ayer... lo de los formularios. Se habló bastante, pero no se llegó a algo concreto. Creo que se comentó que deberían unificarse, pero nadie quiso tomar eso de momento, ¿unificarse?, si que los pongan todos juntos, pero eso va a ser ilegible señores, ¿no están de acuerdo con unificarlos?, no no eso no se resuelve asi, hay que ver que hacemos. Lo de los turnos de guardia, alguien dijo por ahi que están mal asignados. Con lo del los formularios deberíamos reorganizarlos y ya, Lucia ya habíamos cambiado de tema, ¿y que?, pero ese tema no había cerrado, estoy proponiendo que se puede hacer. Clara, ¿que piensas tu?, no a ver hay que preguntarle a la jefa. A mi me parece que deberíamos digitalizar los informes mensuales. Y eso que tiene que ver, estamos hablando de la guardia. No, pero si están hablando de los formulario, estas muy interesado en la guardia Jorge, claro si llevo 3 mese haciendo guardia casi todos los fines de semana, eso ya o puede ser. La guardia yo la voy a programar este mes y le voy a dar los turnos a cada uno justamente, ¿ok?. Y respecto a los formulario, vamos a hacer lo que dice Lucia, con reorganizarlos es suficiente, no se compliquen tanto, todo el mundo ¿deacuerdo?, si , si. Ya seguimos.\nCaballero alguien se ha fijado en lo del sistema de acceso. No Jorge, eso no es responsabilidad de nosotros. Ah no?, pero si el otro día el secretario del director me entrego una planilla grandísima que ponía que era sanción con los que estén entrando con cuenta administrador. Pero eso ya lo cambiaron, nosotros necesitamos ese acceso para trabajar, por si acaso, jorge, ve mañana a hablar personalmente con el director para ver si resolvemos eso, ¿vale?, Si. \nQue va, la conexión esta malísima. Tengo que hablar con alguien para que nos ponga mejor internet, así no se puede. ¿para que vas a hacer eso Clara? ya tienes demasiadas responsabilidades. Eso no es ahora, cuando yo me desocupe lo hago. Vamos a seguir. Los archivos antiguos que están en el almacén hay que moverlos de ahi, porque se van a echar a perder, Lucia y Jorge dedíquense a hacer eso hoy, llamen a los nuevos trabajadores para que los ayuden.  La próxima reunion como siempre, es la semana que viene, ya son las 10 de la mañana, me tengo que ir, ya vamos a terminar.\n\n/no_think\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 13:09:01 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 13:09:01 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 13:09:01 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000224EB957E60>
2025-06-08 13:09:01 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'POST']>
2025-06-08 13:09:01 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:09:01 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'POST']>
2025-06-08 13:09:01 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:09:01 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'POST']>
2025-06-08 13:09:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 17:09:00 GMT'), (b'server', b'uvicorn'), (b'content-length', b'2186'), (b'content-type', b'application/json')])
2025-06-08 13:09:09 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-08 13:09:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'POST']>
2025-06-08 13:09:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:09:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:09:09 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:09:09 | DEBUG    | openai._base_client | _base_client.py:991 | _request() | HTTP Response: POST http://192.168.1.103:8000/v1/chat/completions "200 OK" Headers({'date': 'Sun, 08 Jun 2025 17:09:00 GMT', 'server': 'uvicorn', 'content-length': '2186', 'content-type': 'application/json'})
2025-06-08 13:09:09 | DEBUG    | openai._base_client | _base_client.py:999 | _request() | request_id: None
2025-06-08 13:09:09 | DEBUG    | app | main.py:112 | generate_acta() | Response:
{
  "lugar": "virtualmente",
  "fecha": "día",
  "hora": "8:30",
  "tipo_sesion": "Ordinaria",
  "asistencia_cargo": [
    {
      "nombre": "Jorge Avila",
      "cargo": ""
    },
    {
      "nombre": "Lucía Morales",
      "cargo": ""
    },
    {
      "nombre": "Pablo",
      "cargo": ""
    },
    {
      "nombre": "",
      "cargo": ""
    },
    {
      "nombre": "",
      "cargo": ""
    }
  ],
  "orden_del_dia": [
    "lo de ayer... lo de los formularios",
    "los turnos de guardia"
  ],
  "desarrollo_temas": [
    "Se habló bastante, pero no se llegó a algo concreto. Creo que se comentó que deberían unificarse, pero nadie quiso tomar eso de momento.",
    "Alguien dijo por ahi que están mal asignados.",
    "'Lo de los formularios deberíamos reorganizarlos y ya', Lucia ya habíamos cambiado de tema, ¿y que?, pero ese tema no había cerrado.",
    "'A mi me parece que deberíamos digitalizar los informes mensuales.'"
  ],
  "proposiciones": [
    {
      "descripcion": "'Se puede hacer.'",
      "aprobada": true
    },
    {
      "descripcion": "'Voy a programar este mes los turnos de guardia.'",
      "aprobada": true
    }
  ],
  "acuerdos_adoptados": [
    {
      "descripcion": "'Hagamos lo que dice Lucia, con reorganizarlos es suficiente.'",
      "fecha_cumplimiento": "",
      "responsable": ""
    },
    {
      "descripcion": "'Mover los archivos antiguos del almacén antes de que se echen a perder.'",
      "fecha_cumplimiento": "",
      "responsable": ""
    }
  ],
  "hora_finalizacion": null
}
2025-06-08 13:09:09 | DEBUG    | app | main.py:115 | generate_acta() | Acta:
lugar='virtualmente' fecha='día' hora='8:30' tipo_sesion='Ordinaria' asistencia_cargo=[AsistenteCargo(nombre='Jorge Avila', cargo=''), AsistenteCargo(nombre='Lucía Morales', cargo=''), AsistenteCargo(nombre='Pablo', cargo=''), AsistenteCargo(nombre='', cargo=''), AsistenteCargo(nombre='', cargo='')] orden_del_dia=['lo de ayer... lo de los formularios', 'los turnos de guardia'] desarrollo_temas=['Se habló bastante, pero no se llegó a algo concreto. Creo que se comentó que deberían unificarse, pero nadie quiso tomar eso de momento.', 'Alguien dijo por ahi que están mal asignados.', "'Lo de los formularios deberíamos reorganizarlos y ya', Lucia ya habíamos cambiado de tema, ¿y que?, pero ese tema no había cerrado.", "'A mi me parece que deberíamos digitalizar los informes mensuales.'"] proposiciones=[Proposicion(descripcion="'Se puede hacer.'", aprobada=True), Proposicion(descripcion="'Voy a programar este mes los turnos de guardia.'", aprobada=True)] acuerdos_adoptados=[Acuerdo(descripcion="'Hagamos lo que dice Lucia, con reorganizarlos es suficiente.'", fecha_cumplimiento='', responsable=''), Acuerdo(descripcion="'Mover los archivos antiguos del almacén antes de que se echen a perder.'", fecha_cumplimiento='', responsable='')] hora_finalizacion=None
2025-06-08 13:10:54 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 13:10:54 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 13:10:55 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/initiated HTTP/1.1" 200 0
2025-06-08 13:10:55 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 13:10:55 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='api.gradio.app' port=443 local_address=None timeout=3 socket_options=None
2025-06-08 13:10:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000200F83646B0>
2025-06-08 13:10:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.started ssl_context=<ssl.SSLContext object at 0x00000200F7DC96D0> server_hostname='api.gradio.app' timeout=3
2025-06-08 13:10:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=None socket_options=None
2025-06-08 13:10:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000200F8364F50>
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 17:10:55 GMT'), (b'server', b'uvicorn'), (b'content-length', b'4'), (b'content-type', b'application/json')])
2025-06-08 13:10:56 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET http://127.0.0.1:7860/gradio_api/startup-events "HTTP/1.1 200 OK"
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:10:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 13:10:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 13:10:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=3 socket_options=None
2025-06-08 13:10:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000200F83659A0>
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'HEAD']>
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'HEAD']>
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'HEAD']>
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 17:10:55 GMT'), (b'server', b'uvicorn'), (b'content-length', b'25331'), (b'content-type', b'text/html; charset=utf-8')])
2025-06-08 13:10:56 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: HEAD http://127.0.0.1:7860/ "HTTP/1.1 200 OK"
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'HEAD']>
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:10:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 13:10:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 13:10:56 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 13:10:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000200F82207D0>
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 08 Jun 2025 17:10:56 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'21'), (b'Connection', b'keep-alive'), (b'Server', b'nginx/1.18.0'), (b'Access-Control-Allow-Origin', b'*')])
2025-06-08 13:10:56 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET https://api.gradio.app/pkg-version "HTTP/1.1 200 OK"
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:10:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:10:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 13:10:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 13:10:57 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/launched HTTP/1.1" 200 0
2025-06-08 13:11:13 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_begin with no data
2025-06-08 13:11:13 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[42:61]
2025-06-08 13:11:13 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[63:115]
2025-06-08 13:11:13 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 13:11:13 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[117:129]
2025-06-08 13:11:13 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[131:141]
2025-06-08 13:11:13 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 13:11:13 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_headers_finished with no data
2025-06-08 13:11:13 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[145:81920]
2025-06-08 13:11:13 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:114688]
2025-06-08 13:11:13 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 13:11:13 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 13:11:13 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 13:11:13 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:53430]
2025-06-08 13:11:13 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_end with no data
2025-06-08 13:11:13 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_end with no data
2025-06-08 13:11:14 | INFO     | app | main.py:32 | transcribe() | Transcribe: C:\Users\lin\AppData\Local\Temp\gradio\fdfadc6d4f252af4681116790d34e753832c4f3237d6506ae4892bdc7d357452\audio_prueba.mp3
2025-06-08 13:11:14 | DEBUG    | app | main.py:41 | transcribe() | Transcription: Esto es un ejemplo
2025-06-08 13:11:20 | INFO     | app | main.py:100 | generate_acta() | Generating 'Acta'
2025-06-08 13:11:20 | DEBUG    | app | main.py:109 | generate_acta() | Prompt:

Eres un asistente experto en generar actas de reuniones a partir de transcripciones habladas informales. 
La transcripción puede incluir lenguaje natural, desordenado, repeticiones, interrupciones o errores. 
Tu tarea es analizar cuidadosamente el contenido y extraer la información clave para estructurarla en un JSON con los siguientes campos:

Instrucciones generales:
- No inventes ni asumas información que no esté explícitamente dicha.
- No incluyas símbolos que no sean coma (,) o punto (.).
- Si una información no está presente o no se puede deducir con certeza, deja el campo vacío o como lista vacía según corresponda.
- Nunca respondas con explicaciones ni comentes tus decisiones. Solo genera el JSON estructurado.

Campos explicados:
"lugar": Nombre del lugar donde ocurre la reunión. Solo si se menciona explícitamente (ej: "en el aula B", "en la oficina").
"fecha": Fecha en formato libre, si se menciona de manera explícita (ej:"15 de abril").
"hora": Hora exacta de inicio de la reunión si se menciona (ej: "son las 9:00 am"), entonces la hora es 9:00 am.
"tipo_sesion": Palabra que indique el tipo de sesión, como "Ordinaria", "Extraordinaria" u otra, solo si se dice explícitamente.
"orden_del_dia": Lista de temas que fueron anunciados como el orden del día. Solo extrae lo que se dijo antes de empezar la discusión de los temas.
"asistencia_cargo": Lista de personas que estuvieron presentes representada en dos campos:  
    "nombre_apellidos": Nombre y apellidos de las personas explícitamente presentes en la reunión, no incluyas personas ausentes aunque fueran mencionadas.
    "cargo": El cargo o puesto de trabajo que tiene esa persona si se menciona, si no se menciona déjalo en blanco.
"desarrollo_temas": Lista de ideas discutidas o tratadas. Resume cada tema o punto debatido, sin agregar interpretaciones. Usa frases claras y concisas.
"proposiciones": Lista de propuestas que fueron planteadas en la reunión. Indica si fueron aprobadas (true) o no (false). Una propuesta puede comenzar con frases como "propongo", "sugiero", o derivarse de una votación.
"acuerdos_adoptados": Toda acción concreta que fue acordada, con tres campos:
    1."descripcion": Acción específica que se debe realizar.
    2."fecha_cumplimiento": Fecha límite o expresión temporal si se menciona (ej: "antes del viernes", "hoy").
    3."responsable": Persona a cargo de ejecutar esa acción.
"hora_finalizacion": Hora en la que terminó la reunión si se menciona claramente (ej: "se levanta la sesión, son las 10:40") entonces la hora de finalización es 10:40.
Aqui tienes la transcripción que debes procesar:
Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números...  Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes.  Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.
/no_think

2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\nEres un asistente experto en generar actas de reuniones a partir de transcripciones habladas informales. \nLa transcripción puede incluir lenguaje natural, desordenado, repeticiones, interrupciones o errores. \nTu tarea es analizar cuidadosamente el contenido y extraer la información clave para estructurarla en un JSON con los siguientes campos:\n\nInstrucciones generales:\n- No inventes ni asumas información que no esté explícitamente dicha.\n- No incluyas símbolos que no sean coma (,) o punto (.).\n- Si una información no está presente o no se puede deducir con certeza, deja el campo vacío o como lista vacía según corresponda.\n- Nunca respondas con explicaciones ni comentes tus decisiones. Solo genera el JSON estructurado.\n\nCampos explicados:\n"lugar": Nombre del lugar donde ocurre la reunión. Solo si se menciona explícitamente (ej: "en el aula B", "en la oficina").\n"fecha": Fecha en formato libre, si se menciona de manera explícita (ej:"15 de abril").\n"hora": Hora exacta de inicio de la reunión si se menciona (ej: "son las 9:00 am"), entonces la hora es 9:00 am.\n"tipo_sesion": Palabra que indique el tipo de sesión, como "Ordinaria", "Extraordinaria" u otra, solo si se dice explícitamente.\n"orden_del_dia": Lista de temas que fueron anunciados como el orden del día. Solo extrae lo que se dijo antes de empezar la discusión de los temas.\n"asistencia_cargo": Lista de personas que estuvieron presentes representada en dos campos:  \n    "nombre_apellidos": Nombre y apellidos de las personas explícitamente presentes en la reunión, no incluyas personas ausentes aunque fueran mencionadas.\n    "cargo": El cargo o puesto de trabajo que tiene esa persona si se menciona, si no se menciona déjalo en blanco.\n"desarrollo_temas": Lista de ideas discutidas o tratadas. Resume cada tema o punto debatido, sin agregar interpretaciones. Usa frases claras y concisas.\n"proposiciones": Lista de propuestas que fueron planteadas en la reunión. Indica si fueron aprobadas (true) o no (false). Una propuesta puede comenzar con frases como "propongo", "sugiero", o derivarse de una votación.\n"acuerdos_adoptados": Toda acción concreta que fue acordada, con tres campos:\n    1."descripcion": Acción específica que se debe realizar.\n    2."fecha_cumplimiento": Fecha límite o expresión temporal si se menciona (ej: "antes del viernes", "hoy").\n    3."responsable": Persona a cargo de ejecutar esa acción.\n"hora_finalizacion": Hora en la que terminó la reunión si se menciona claramente (ej: "se levanta la sesión, son las 10:40") entonces la hora de finalización es 10:40.\nAqui tienes la transcripción que debes procesar:\nBueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n/no_think\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 8096, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 13:11:20 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 13:11:20 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000200F840BAA0>
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'POST']>
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'POST']>
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'POST']>
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 400, b'Bad Request', [(b'date', b'Sun, 08 Jun 2025 17:11:19 GMT'), (b'server', b'uvicorn'), (b'content-length', b'270'), (b'content-type', b'application/json')])
2025-06-08 13:11:20 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'POST']>
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:991 | _request() | HTTP Response: POST http://192.168.1.103:8000/v1/chat/completions "400 Bad Request" Headers({'date': 'Sun, 08 Jun 2025 17:11:19 GMT', 'server': 'uvicorn', 'content-length': '270', 'content-type': 'application/json'})
2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:999 | _request() | request_id: None
2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:1004 | _request() | Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 1002, in _request
    response.raise_for_status()
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '400 Bad Request' for url 'http://192.168.1.103:8000/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400
2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:743 | _should_retry() | Not retrying
2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:1022 | _request() | Re-raising status error
2025-06-08 13:11:20 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: Error code: 400 - {'object': 'error', 'message': "This model's maximum context length is 8096 tokens. However, you requested 9261 tokens (1165 in the messages, 8096 in the completion). Please reduce the length of the messages or completion.", 'type': 'BadRequestError', 'param': None, 'code': 400}
2025-06-08 13:11:20 | DEBUG    | app | main.py:109 | generate_acta() | Prompt:

Eres un asistente experto en generar actas de reuniones a partir de transcripciones habladas informales. 
La transcripción puede incluir lenguaje natural, desordenado, repeticiones, interrupciones o errores. 
Tu tarea es analizar cuidadosamente el contenido y extraer la información clave para estructurarla en un JSON con los siguientes campos:

Instrucciones generales:
- No inventes ni asumas información que no esté explícitamente dicha.
- No incluyas símbolos que no sean coma (,) o punto (.).
- Si una información no está presente o no se puede deducir con certeza, deja el campo vacío o como lista vacía según corresponda.
- Nunca respondas con explicaciones ni comentes tus decisiones. Solo genera el JSON estructurado.

Campos explicados:
"lugar": Nombre del lugar donde ocurre la reunión. Solo si se menciona explícitamente (ej: "en el aula B", "en la oficina").
"fecha": Fecha en formato libre, si se menciona de manera explícita (ej:"15 de abril").
"hora": Hora exacta de inicio de la reunión si se menciona (ej: "son las 9:00 am"), entonces la hora es 9:00 am.
"tipo_sesion": Palabra que indique el tipo de sesión, como "Ordinaria", "Extraordinaria" u otra, solo si se dice explícitamente.
"orden_del_dia": Lista de temas que fueron anunciados como el orden del día. Solo extrae lo que se dijo antes de empezar la discusión de los temas.
"asistencia_cargo": Lista de personas que estuvieron presentes representada en dos campos:  
    "nombre_apellidos": Nombre y apellidos de las personas explícitamente presentes en la reunión, no incluyas personas ausentes aunque fueran mencionadas.
    "cargo": El cargo o puesto de trabajo que tiene esa persona si se menciona, si no se menciona déjalo en blanco.
"desarrollo_temas": Lista de ideas discutidas o tratadas. Resume cada tema o punto debatido, sin agregar interpretaciones. Usa frases claras y concisas.
"proposiciones": Lista de propuestas que fueron planteadas en la reunión. Indica si fueron aprobadas (true) o no (false). Una propuesta puede comenzar con frases como "propongo", "sugiero", o derivarse de una votación.
"acuerdos_adoptados": Toda acción concreta que fue acordada, con tres campos:
    1."descripcion": Acción específica que se debe realizar.
    2."fecha_cumplimiento": Fecha límite o expresión temporal si se menciona (ej: "antes del viernes", "hoy").
    3."responsable": Persona a cargo de ejecutar esa acción.
"hora_finalizacion": Hora en la que terminó la reunión si se menciona claramente (ej: "se levanta la sesión, son las 10:40") entonces la hora de finalización es 10:40.
Aqui tienes la transcripción que debes procesar:
Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números...  Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes.  Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.
/no_think

2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\nEres un asistente experto en generar actas de reuniones a partir de transcripciones habladas informales. \nLa transcripción puede incluir lenguaje natural, desordenado, repeticiones, interrupciones o errores. \nTu tarea es analizar cuidadosamente el contenido y extraer la información clave para estructurarla en un JSON con los siguientes campos:\n\nInstrucciones generales:\n- No inventes ni asumas información que no esté explícitamente dicha.\n- No incluyas símbolos que no sean coma (,) o punto (.).\n- Si una información no está presente o no se puede deducir con certeza, deja el campo vacío o como lista vacía según corresponda.\n- Nunca respondas con explicaciones ni comentes tus decisiones. Solo genera el JSON estructurado.\n\nCampos explicados:\n"lugar": Nombre del lugar donde ocurre la reunión. Solo si se menciona explícitamente (ej: "en el aula B", "en la oficina").\n"fecha": Fecha en formato libre, si se menciona de manera explícita (ej:"15 de abril").\n"hora": Hora exacta de inicio de la reunión si se menciona (ej: "son las 9:00 am"), entonces la hora es 9:00 am.\n"tipo_sesion": Palabra que indique el tipo de sesión, como "Ordinaria", "Extraordinaria" u otra, solo si se dice explícitamente.\n"orden_del_dia": Lista de temas que fueron anunciados como el orden del día. Solo extrae lo que se dijo antes de empezar la discusión de los temas.\n"asistencia_cargo": Lista de personas que estuvieron presentes representada en dos campos:  \n    "nombre_apellidos": Nombre y apellidos de las personas explícitamente presentes en la reunión, no incluyas personas ausentes aunque fueran mencionadas.\n    "cargo": El cargo o puesto de trabajo que tiene esa persona si se menciona, si no se menciona déjalo en blanco.\n"desarrollo_temas": Lista de ideas discutidas o tratadas. Resume cada tema o punto debatido, sin agregar interpretaciones. Usa frases claras y concisas.\n"proposiciones": Lista de propuestas que fueron planteadas en la reunión. Indica si fueron aprobadas (true) o no (false). Una propuesta puede comenzar con frases como "propongo", "sugiero", o derivarse de una votación.\n"acuerdos_adoptados": Toda acción concreta que fue acordada, con tres campos:\n    1."descripcion": Acción específica que se debe realizar.\n    2."fecha_cumplimiento": Fecha límite o expresión temporal si se menciona (ej: "antes del viernes", "hoy").\n    3."responsable": Persona a cargo de ejecutar esa acción.\n"hora_finalizacion": Hora en la que terminó la reunión si se menciona claramente (ej: "se levanta la sesión, son las 10:40") entonces la hora de finalización es 10:40.\nAqui tienes la transcripción que debes procesar:\nBueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n/no_think\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 8096, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'POST']>
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'POST']>
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'POST']>
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 400, b'Bad Request', [(b'date', b'Sun, 08 Jun 2025 17:11:19 GMT'), (b'server', b'uvicorn'), (b'content-length', b'270'), (b'content-type', b'application/json')])
2025-06-08 13:11:20 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'POST']>
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:991 | _request() | HTTP Response: POST http://192.168.1.103:8000/v1/chat/completions "400 Bad Request" Headers({'date': 'Sun, 08 Jun 2025 17:11:19 GMT', 'server': 'uvicorn', 'content-length': '270', 'content-type': 'application/json'})
2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:999 | _request() | request_id: None
2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:1004 | _request() | Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 1002, in _request
    response.raise_for_status()
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '400 Bad Request' for url 'http://192.168.1.103:8000/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400
2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:743 | _should_retry() | Not retrying
2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:1022 | _request() | Re-raising status error
2025-06-08 13:11:20 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: Error code: 400 - {'object': 'error', 'message': "This model's maximum context length is 8096 tokens. However, you requested 9261 tokens (1165 in the messages, 8096 in the completion). Please reduce the length of the messages or completion.", 'type': 'BadRequestError', 'param': None, 'code': 400}
2025-06-08 13:11:20 | DEBUG    | app | main.py:109 | generate_acta() | Prompt:

Eres un asistente experto en generar actas de reuniones a partir de transcripciones habladas informales. 
La transcripción puede incluir lenguaje natural, desordenado, repeticiones, interrupciones o errores. 
Tu tarea es analizar cuidadosamente el contenido y extraer la información clave para estructurarla en un JSON con los siguientes campos:

Instrucciones generales:
- No inventes ni asumas información que no esté explícitamente dicha.
- No incluyas símbolos que no sean coma (,) o punto (.).
- Si una información no está presente o no se puede deducir con certeza, deja el campo vacío o como lista vacía según corresponda.
- Nunca respondas con explicaciones ni comentes tus decisiones. Solo genera el JSON estructurado.

Campos explicados:
"lugar": Nombre del lugar donde ocurre la reunión. Solo si se menciona explícitamente (ej: "en el aula B", "en la oficina").
"fecha": Fecha en formato libre, si se menciona de manera explícita (ej:"15 de abril").
"hora": Hora exacta de inicio de la reunión si se menciona (ej: "son las 9:00 am"), entonces la hora es 9:00 am.
"tipo_sesion": Palabra que indique el tipo de sesión, como "Ordinaria", "Extraordinaria" u otra, solo si se dice explícitamente.
"orden_del_dia": Lista de temas que fueron anunciados como el orden del día. Solo extrae lo que se dijo antes de empezar la discusión de los temas.
"asistencia_cargo": Lista de personas que estuvieron presentes representada en dos campos:  
    "nombre_apellidos": Nombre y apellidos de las personas explícitamente presentes en la reunión, no incluyas personas ausentes aunque fueran mencionadas.
    "cargo": El cargo o puesto de trabajo que tiene esa persona si se menciona, si no se menciona déjalo en blanco.
"desarrollo_temas": Lista de ideas discutidas o tratadas. Resume cada tema o punto debatido, sin agregar interpretaciones. Usa frases claras y concisas.
"proposiciones": Lista de propuestas que fueron planteadas en la reunión. Indica si fueron aprobadas (true) o no (false). Una propuesta puede comenzar con frases como "propongo", "sugiero", o derivarse de una votación.
"acuerdos_adoptados": Toda acción concreta que fue acordada, con tres campos:
    1."descripcion": Acción específica que se debe realizar.
    2."fecha_cumplimiento": Fecha límite o expresión temporal si se menciona (ej: "antes del viernes", "hoy").
    3."responsable": Persona a cargo de ejecutar esa acción.
"hora_finalizacion": Hora en la que terminó la reunión si se menciona claramente (ej: "se levanta la sesión, son las 10:40") entonces la hora de finalización es 10:40.
Aqui tienes la transcripción que debes procesar:
Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números...  Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes.  Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.
/no_think

2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\nEres un asistente experto en generar actas de reuniones a partir de transcripciones habladas informales. \nLa transcripción puede incluir lenguaje natural, desordenado, repeticiones, interrupciones o errores. \nTu tarea es analizar cuidadosamente el contenido y extraer la información clave para estructurarla en un JSON con los siguientes campos:\n\nInstrucciones generales:\n- No inventes ni asumas información que no esté explícitamente dicha.\n- No incluyas símbolos que no sean coma (,) o punto (.).\n- Si una información no está presente o no se puede deducir con certeza, deja el campo vacío o como lista vacía según corresponda.\n- Nunca respondas con explicaciones ni comentes tus decisiones. Solo genera el JSON estructurado.\n\nCampos explicados:\n"lugar": Nombre del lugar donde ocurre la reunión. Solo si se menciona explícitamente (ej: "en el aula B", "en la oficina").\n"fecha": Fecha en formato libre, si se menciona de manera explícita (ej:"15 de abril").\n"hora": Hora exacta de inicio de la reunión si se menciona (ej: "son las 9:00 am"), entonces la hora es 9:00 am.\n"tipo_sesion": Palabra que indique el tipo de sesión, como "Ordinaria", "Extraordinaria" u otra, solo si se dice explícitamente.\n"orden_del_dia": Lista de temas que fueron anunciados como el orden del día. Solo extrae lo que se dijo antes de empezar la discusión de los temas.\n"asistencia_cargo": Lista de personas que estuvieron presentes representada en dos campos:  \n    "nombre_apellidos": Nombre y apellidos de las personas explícitamente presentes en la reunión, no incluyas personas ausentes aunque fueran mencionadas.\n    "cargo": El cargo o puesto de trabajo que tiene esa persona si se menciona, si no se menciona déjalo en blanco.\n"desarrollo_temas": Lista de ideas discutidas o tratadas. Resume cada tema o punto debatido, sin agregar interpretaciones. Usa frases claras y concisas.\n"proposiciones": Lista de propuestas que fueron planteadas en la reunión. Indica si fueron aprobadas (true) o no (false). Una propuesta puede comenzar con frases como "propongo", "sugiero", o derivarse de una votación.\n"acuerdos_adoptados": Toda acción concreta que fue acordada, con tres campos:\n    1."descripcion": Acción específica que se debe realizar.\n    2."fecha_cumplimiento": Fecha límite o expresión temporal si se menciona (ej: "antes del viernes", "hoy").\n    3."responsable": Persona a cargo de ejecutar esa acción.\n"hora_finalizacion": Hora en la que terminó la reunión si se menciona claramente (ej: "se levanta la sesión, son las 10:40") entonces la hora de finalización es 10:40.\nAqui tienes la transcripción que debes procesar:\nBueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n/no_think\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 8096, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'POST']>
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'POST']>
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'POST']>
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 400, b'Bad Request', [(b'date', b'Sun, 08 Jun 2025 17:11:19 GMT'), (b'server', b'uvicorn'), (b'content-length', b'270'), (b'content-type', b'application/json')])
2025-06-08 13:11:20 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions "HTTP/1.1 400 Bad Request"
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'POST']>
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:11:20 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:991 | _request() | HTTP Response: POST http://192.168.1.103:8000/v1/chat/completions "400 Bad Request" Headers({'date': 'Sun, 08 Jun 2025 17:11:19 GMT', 'server': 'uvicorn', 'content-length': '270', 'content-type': 'application/json'})
2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:999 | _request() | request_id: None
2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:1004 | _request() | Encountered httpx.HTTPStatusError
Traceback (most recent call last):
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\openai\_base_client.py", line 1002, in _request
    response.raise_for_status()
  File "D:\---thesis\meeting_minutes_ai_generator\.venv\Lib\site-packages\httpx\_models.py", line 829, in raise_for_status
    raise HTTPStatusError(message, request=request, response=self)
httpx.HTTPStatusError: Client error '400 Bad Request' for url 'http://192.168.1.103:8000/v1/chat/completions'
For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400
2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:743 | _should_retry() | Not retrying
2025-06-08 13:11:20 | DEBUG    | openai._base_client | _base_client.py:1022 | _request() | Re-raising status error
2025-06-08 13:11:20 | ERROR    | app | main.py:120 | generate_acta() | Error al generar acta: Error code: 400 - {'object': 'error', 'message': "This model's maximum context length is 8096 tokens. However, you requested 9261 tokens (1165 in the messages, 8096 in the completion). Please reduce the length of the messages or completion.", 'type': 'BadRequestError', 'param': None, 'code': 400}
2025-06-08 13:13:53 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 13:13:54 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 13:13:54 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='api.gradio.app' port=443 local_address=None timeout=3 socket_options=None
2025-06-08 13:13:54 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000028DA253B020>
2025-06-08 13:13:54 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.started ssl_context=<ssl.SSLContext object at 0x0000028D9786AF50> server_hostname='api.gradio.app' timeout=3
2025-06-08 13:13:55 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/initiated HTTP/1.1" 200 0
2025-06-08 13:13:55 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000028DA253AD20>
2025-06-08 13:13:55 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 13:13:55 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:13:55 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 13:13:55 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:13:55 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 13:13:55 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 08 Jun 2025 17:13:55 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'21'), (b'Connection', b'keep-alive'), (b'Server', b'nginx/1.18.0'), (b'Access-Control-Allow-Origin', b'*')])
2025-06-08 13:13:55 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET https://api.gradio.app/pkg-version "HTTP/1.1 200 OK"
2025-06-08 13:13:55 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 13:13:55 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:13:55 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:13:55 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:13:55 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 13:13:55 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 13:13:55 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 13:13:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=None socket_options=None
2025-06-08 13:13:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000028DA28728D0>
2025-06-08 13:13:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 13:13:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:13:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 13:13:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:13:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 13:13:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 17:13:55 GMT'), (b'server', b'uvicorn'), (b'content-length', b'4'), (b'content-type', b'application/json')])
2025-06-08 13:13:56 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET http://127.0.0.1:7860/gradio_api/startup-events "HTTP/1.1 200 OK"
2025-06-08 13:13:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 13:13:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:13:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:13:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:13:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 13:13:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 13:13:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=3 socket_options=None
2025-06-08 13:13:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000028DA2873B60>
2025-06-08 13:13:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'HEAD']>
2025-06-08 13:13:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:13:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'HEAD']>
2025-06-08 13:13:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:13:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'HEAD']>
2025-06-08 13:13:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 17:13:55 GMT'), (b'server', b'uvicorn'), (b'content-length', b'25331'), (b'content-type', b'text/html; charset=utf-8')])
2025-06-08 13:13:56 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: HEAD http://127.0.0.1:7860/ "HTTP/1.1 200 OK"
2025-06-08 13:13:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'HEAD']>
2025-06-08 13:13:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:13:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:13:56 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:13:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 13:13:56 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 13:13:56 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 13:13:56 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/launched HTTP/1.1" 200 0
2025-06-08 13:14:04 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_begin with no data
2025-06-08 13:14:04 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[42:61]
2025-06-08 13:14:04 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[63:115]
2025-06-08 13:14:04 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 13:14:04 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[117:129]
2025-06-08 13:14:04 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[131:141]
2025-06-08 13:14:04 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 13:14:04 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_headers_finished with no data
2025-06-08 13:14:04 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[145:81920]
2025-06-08 13:14:04 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 13:14:04 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 13:14:04 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 13:14:04 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 13:14:04 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:37046]
2025-06-08 13:14:04 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_end with no data
2025-06-08 13:14:04 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_end with no data
2025-06-08 13:14:05 | INFO     | app | main.py:32 | transcribe() | Transcribe: C:\Users\lin\AppData\Local\Temp\gradio\fdfadc6d4f252af4681116790d34e753832c4f3237d6506ae4892bdc7d357452\audio_prueba.mp3
2025-06-08 13:14:05 | DEBUG    | app | main.py:41 | transcribe() | Transcription: Esto es un ejemplo
2025-06-08 13:14:14 | INFO     | app | main.py:100 | generate_acta() | Generating 'Acta'
2025-06-08 13:14:14 | DEBUG    | app | main.py:109 | generate_acta() | Prompt:

Eres un asistente experto en generar actas de reuniones a partir de transcripciones habladas informales. 
La transcripción puede incluir lenguaje natural, desordenado, repeticiones, interrupciones o errores. 
Tu tarea es analizar cuidadosamente el contenido y extraer la información clave para estructurarla en un JSON con los siguientes campos:

Instrucciones generales:
- No inventes ni asumas información que no esté explícitamente dicha.
- No incluyas símbolos que no sean coma (,) o punto (.).
- Si una información no está presente o no se puede deducir con certeza, deja el campo vacío o como lista vacía según corresponda.
- Nunca respondas con explicaciones ni comentes tus decisiones. Solo genera el JSON estructurado.

Campos explicados:
"lugar": Nombre del lugar donde ocurre la reunión. Solo si se menciona explícitamente (ej: "en el aula B", "en la oficina").
"fecha": Fecha en formato libre, si se menciona de manera explícita (ej:"15 de abril").
"hora": Hora exacta de inicio de la reunión si se menciona (ej: "son las 9:00 am"), entonces la hora es 9:00 am.
"tipo_sesion": Palabra que indique el tipo de sesión, como "Ordinaria", "Extraordinaria" u otra, solo si se dice explícitamente.
"orden_del_dia": Lista de temas que fueron anunciados como el orden del día. Solo extrae lo que se dijo antes de empezar la discusión de los temas.
"asistencia_cargo": Lista de personas que estuvieron presentes representada en dos campos:  
    "nombre_apellidos": Nombre y apellidos de las personas explícitamente presentes en la reunión, no incluyas personas ausentes aunque fueran mencionadas.
    "cargo": El cargo o puesto de trabajo que tiene esa persona si se menciona, si no se menciona déjalo en blanco.
"desarrollo_temas": Lista de ideas discutidas o tratadas. Resume cada tema o punto debatido, sin agregar interpretaciones. Usa frases claras y concisas.
"proposiciones": Lista de propuestas que fueron planteadas en la reunión. Indica si fueron aprobadas (true) o no (false). Una propuesta puede comenzar con frases como "propongo", "sugiero", o derivarse de una votación.
"acuerdos_adoptados": Toda acción concreta que fue acordada, con tres campos:
    1."descripcion": Acción específica que se debe realizar.
    2."fecha_cumplimiento": Fecha límite o expresión temporal si se menciona (ej: "antes del viernes", "hoy").
    3."responsable": Persona a cargo de ejecutar esa acción.
"hora_finalizacion": Hora en la que terminó la reunión si se menciona claramente (ej: "se levanta la sesión, son las 10:40") entonces la hora de finalización es 10:40.
Aqui tienes la transcripción que debes procesar:
Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números...  Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes.  Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.
/no_think

2025-06-08 13:14:14 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\nEres un asistente experto en generar actas de reuniones a partir de transcripciones habladas informales. \nLa transcripción puede incluir lenguaje natural, desordenado, repeticiones, interrupciones o errores. \nTu tarea es analizar cuidadosamente el contenido y extraer la información clave para estructurarla en un JSON con los siguientes campos:\n\nInstrucciones generales:\n- No inventes ni asumas información que no esté explícitamente dicha.\n- No incluyas símbolos que no sean coma (,) o punto (.).\n- Si una información no está presente o no se puede deducir con certeza, deja el campo vacío o como lista vacía según corresponda.\n- Nunca respondas con explicaciones ni comentes tus decisiones. Solo genera el JSON estructurado.\n\nCampos explicados:\n"lugar": Nombre del lugar donde ocurre la reunión. Solo si se menciona explícitamente (ej: "en el aula B", "en la oficina").\n"fecha": Fecha en formato libre, si se menciona de manera explícita (ej:"15 de abril").\n"hora": Hora exacta de inicio de la reunión si se menciona (ej: "son las 9:00 am"), entonces la hora es 9:00 am.\n"tipo_sesion": Palabra que indique el tipo de sesión, como "Ordinaria", "Extraordinaria" u otra, solo si se dice explícitamente.\n"orden_del_dia": Lista de temas que fueron anunciados como el orden del día. Solo extrae lo que se dijo antes de empezar la discusión de los temas.\n"asistencia_cargo": Lista de personas que estuvieron presentes representada en dos campos:  \n    "nombre_apellidos": Nombre y apellidos de las personas explícitamente presentes en la reunión, no incluyas personas ausentes aunque fueran mencionadas.\n    "cargo": El cargo o puesto de trabajo que tiene esa persona si se menciona, si no se menciona déjalo en blanco.\n"desarrollo_temas": Lista de ideas discutidas o tratadas. Resume cada tema o punto debatido, sin agregar interpretaciones. Usa frases claras y concisas.\n"proposiciones": Lista de propuestas que fueron planteadas en la reunión. Indica si fueron aprobadas (true) o no (false). Una propuesta puede comenzar con frases como "propongo", "sugiero", o derivarse de una votación.\n"acuerdos_adoptados": Toda acción concreta que fue acordada, con tres campos:\n    1."descripcion": Acción específica que se debe realizar.\n    2."fecha_cumplimiento": Fecha límite o expresión temporal si se menciona (ej: "antes del viernes", "hoy").\n    3."responsable": Persona a cargo de ejecutar esa acción.\n"hora_finalizacion": Hora en la que terminó la reunión si se menciona claramente (ej: "se levanta la sesión, son las 10:40") entonces la hora de finalización es 10:40.\nAqui tienes la transcripción que debes procesar:\nBueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n/no_think\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 500, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 13:14:14 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 13:14:14 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 13:14:14 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000028DA2964950>
2025-06-08 13:14:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'POST']>
2025-06-08 13:14:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:14:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'POST']>
2025-06-08 13:14:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:14:14 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'POST']>
2025-06-08 13:14:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 17:14:14 GMT'), (b'server', b'uvicorn'), (b'content-length', b'2351'), (b'content-type', b'application/json')])
2025-06-08 13:14:23 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-08 13:14:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'POST']>
2025-06-08 13:14:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:14:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:14:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:14:23 | DEBUG    | openai._base_client | _base_client.py:991 | _request() | HTTP Response: POST http://192.168.1.103:8000/v1/chat/completions "200 OK" Headers({'date': 'Sun, 08 Jun 2025 17:14:14 GMT', 'server': 'uvicorn', 'content-length': '2351', 'content-type': 'application/json'})
2025-06-08 13:14:23 | DEBUG    | openai._base_client | _base_client.py:999 | _request() | request_id: None
2025-06-08 13:14:23 | DEBUG    | app | main.py:112 | generate_acta() | Response:
{
  "lugar": "aula inteligente",
  "fecha": "2024",
  "hora": "9:15 am",
  "tipo_sesion": "Ordinaria",
  "asistencia_cargo": [
    {
      "nombre": "Director ejecutivo Oscar Lucero Moya",
      "cargo": "Director ejecutivo"
    },
    {
      "nombre": "Secretaria del director Lucia Gomez Vidal",
      "cargo": "Secretaria del director"
    },
    {
      "nombre": "Directora de operaciones Ana Maria Sanchez Mora",
      "cargo": "Directora de operaciones"
    },
    {
      "nombre": "Director de redes Roberto Martinez Sanchez",
      "cargo": "Director de redes"
    }
  ],
  "orden_del_dia": ["ventas del trimestre"],
  "desarrollo_temas": [
    "se discutió la fecha del acta anterior, que debía actualizarse de 2023 a 2024",
    "se analizó el desempeño de las ventas, que cayeron un 12% respecto al trimestre anterior",
    "se comentó que los envíos han sido retrasados varias veces y se propuso multar a los responsables por el incumplimiento",
    "se decidió aplicar una multa fija al grupo responsable por los retrasos en los envíos",
    "se acordó que Maria redactará un documento formal para solicitar la sanción a los responsables",
    "se mencionó la necesidad de arreglar el aire acondicionado en la oficina, ya que está muy caliente"
  ],
  "proposiciones": [
    {
      "descripcion": ". Multar a los responsables por los retrasos en los envíos.",
      "aprobada": true
    },
    {
      "descripcion": ". Dialogar con ellos para resolver el problema.",
      "aprobada": false
    }
  ],
  "acuerdos_adoptados": [
    {
      "descripcion": ". Actualizar la fecha del acta anterior de 2023 a 2024.",
      "fecha_cumplimiento": "",
      "responsable": ""
    },
    {
      "descripcion": ". Aplic
2025-06-08 13:17:21 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 13:17:21 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 13:17:21 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='api.gradio.app' port=443 local_address=None timeout=3 socket_options=None
2025-06-08 13:17:22 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000237DD021CA0>
2025-06-08 13:17:22 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.started ssl_context=<ssl.SSLContext object at 0x00000237D251EE50> server_hostname='api.gradio.app' timeout=3
2025-06-08 13:17:22 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/initiated HTTP/1.1" 200 0
2025-06-08 13:17:22 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000237DD169BB0>
2025-06-08 13:17:22 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 13:17:22 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:17:22 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 13:17:22 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:17:22 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 13:17:22 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 13:17:22 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 08 Jun 2025 17:17:22 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'21'), (b'Connection', b'keep-alive'), (b'Server', b'nginx/1.18.0'), (b'Access-Control-Allow-Origin', b'*')])
2025-06-08 13:17:22 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET https://api.gradio.app/pkg-version "HTTP/1.1 200 OK"
2025-06-08 13:17:22 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 13:17:22 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:17:22 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:17:22 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:17:22 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 13:17:22 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 13:17:23 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=None socket_options=None
2025-06-08 13:17:23 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000237DD2B44D0>
2025-06-08 13:17:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 13:17:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:17:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 13:17:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:17:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 13:17:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 17:17:22 GMT'), (b'server', b'uvicorn'), (b'content-length', b'4'), (b'content-type', b'application/json')])
2025-06-08 13:17:23 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET http://127.0.0.1:7860/gradio_api/startup-events "HTTP/1.1 200 OK"
2025-06-08 13:17:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 13:17:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:17:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:17:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:17:23 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 13:17:23 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 13:17:23 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=3 socket_options=None
2025-06-08 13:17:23 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000237DD4AB710>
2025-06-08 13:17:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'HEAD']>
2025-06-08 13:17:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:17:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'HEAD']>
2025-06-08 13:17:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:17:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'HEAD']>
2025-06-08 13:17:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 17:17:22 GMT'), (b'server', b'uvicorn'), (b'content-length', b'25331'), (b'content-type', b'text/html; charset=utf-8')])
2025-06-08 13:17:23 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: HEAD http://127.0.0.1:7860/ "HTTP/1.1 200 OK"
2025-06-08 13:17:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'HEAD']>
2025-06-08 13:17:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:17:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:17:23 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:17:23 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 13:17:23 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 13:17:23 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 13:17:24 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/launched HTTP/1.1" 200 0
2025-06-08 13:17:41 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_begin with no data
2025-06-08 13:17:41 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[42:61]
2025-06-08 13:17:41 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[63:115]
2025-06-08 13:17:41 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 13:17:41 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[117:129]
2025-06-08 13:17:41 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[131:141]
2025-06-08 13:17:41 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 13:17:41 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_headers_finished with no data
2025-06-08 13:17:41 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[145:81920]
2025-06-08 13:17:41 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 13:17:41 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 13:17:41 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 13:17:41 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 13:17:41 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:37046]
2025-06-08 13:17:41 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_end with no data
2025-06-08 13:17:41 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_end with no data
2025-06-08 13:17:43 | INFO     | app | main.py:32 | transcribe() | Transcribe: C:\Users\lin\AppData\Local\Temp\gradio\fdfadc6d4f252af4681116790d34e753832c4f3237d6506ae4892bdc7d357452\audio_prueba.mp3
2025-06-08 13:17:43 | DEBUG    | app | main.py:41 | transcribe() | Transcription: Esto es un ejemplo
2025-06-08 13:17:49 | INFO     | app | main.py:100 | generate_acta() | Generating 'Acta'
2025-06-08 13:17:49 | DEBUG    | app | main.py:109 | generate_acta() | Prompt:

Eres un asistente experto en generar actas de reuniones a partir de transcripciones habladas informales. 
La transcripción puede incluir lenguaje natural, desordenado, repeticiones, interrupciones o errores. 
Tu tarea es analizar cuidadosamente el contenido y extraer la información clave para estructurarla en un JSON con los siguientes campos:

Instrucciones generales:
- No inventes ni asumas información que no esté explícitamente dicha.
- No incluyas símbolos que no sean coma (,) o punto (.).
- Si una información no está presente o no se puede deducir con certeza, deja el campo vacío o como lista vacía según corresponda.
- Nunca respondas con explicaciones ni comentes tus decisiones. Solo genera el JSON estructurado.

Campos explicados:
"lugar": Nombre del lugar donde ocurre la reunión. Solo si se menciona explícitamente (ej: "en el aula B", "en la oficina").
"fecha": Fecha en formato libre, si se menciona de manera explícita (ej:"15 de abril").
"hora": Hora exacta de inicio de la reunión si se menciona (ej: "son las 9:00 am"), entonces la hora es 9:00 am.
"tipo_sesion": Palabra que indique el tipo de sesión, como "Ordinaria", "Extraordinaria" u otra, solo si se dice explícitamente.
"orden_del_dia": Lista de temas que fueron anunciados como el orden del día. Solo extrae lo que se dijo antes de empezar la discusión de los temas.
"asistencia_cargo": Lista de personas que estuvieron presentes representada en dos campos:  
    "nombre_apellidos": Nombre y apellidos de las personas explícitamente presentes en la reunión, no incluyas personas ausentes aunque fueran mencionadas.
    "cargo": El cargo o puesto de trabajo que tiene esa persona si se menciona, si no se menciona déjalo en blanco.
"desarrollo_temas": Lista de ideas discutidas o tratadas. Resume cada tema o punto debatido, sin agregar interpretaciones. Usa frases claras y concisas.
"proposiciones": Lista de propuestas que fueron planteadas en la reunión. Indica si fueron aprobadas (true) o no (false). Una propuesta puede comenzar con frases como "propongo", "sugiero", o derivarse de una votación.
"acuerdos_adoptados": Toda acción concreta que fue acordada, con tres campos:
    1."descripcion": Acción específica que se debe realizar.
    2."fecha_cumplimiento": Fecha límite o expresión temporal si se menciona (ej: "antes del viernes", "hoy").
    3."responsable": Persona a cargo de ejecutar esa acción.
"hora_finalizacion": Hora en la que terminó la reunión si se menciona claramente (ej: "se levanta la sesión, son las 10:40") entonces la hora de finalización es 10:40.
Aqui tienes la transcripción que debes procesar:
Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números...  Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes.  Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.
/no_think

2025-06-08 13:17:49 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\nEres un asistente experto en generar actas de reuniones a partir de transcripciones habladas informales. \nLa transcripción puede incluir lenguaje natural, desordenado, repeticiones, interrupciones o errores. \nTu tarea es analizar cuidadosamente el contenido y extraer la información clave para estructurarla en un JSON con los siguientes campos:\n\nInstrucciones generales:\n- No inventes ni asumas información que no esté explícitamente dicha.\n- No incluyas símbolos que no sean coma (,) o punto (.).\n- Si una información no está presente o no se puede deducir con certeza, deja el campo vacío o como lista vacía según corresponda.\n- Nunca respondas con explicaciones ni comentes tus decisiones. Solo genera el JSON estructurado.\n\nCampos explicados:\n"lugar": Nombre del lugar donde ocurre la reunión. Solo si se menciona explícitamente (ej: "en el aula B", "en la oficina").\n"fecha": Fecha en formato libre, si se menciona de manera explícita (ej:"15 de abril").\n"hora": Hora exacta de inicio de la reunión si se menciona (ej: "son las 9:00 am"), entonces la hora es 9:00 am.\n"tipo_sesion": Palabra que indique el tipo de sesión, como "Ordinaria", "Extraordinaria" u otra, solo si se dice explícitamente.\n"orden_del_dia": Lista de temas que fueron anunciados como el orden del día. Solo extrae lo que se dijo antes de empezar la discusión de los temas.\n"asistencia_cargo": Lista de personas que estuvieron presentes representada en dos campos:  \n    "nombre_apellidos": Nombre y apellidos de las personas explícitamente presentes en la reunión, no incluyas personas ausentes aunque fueran mencionadas.\n    "cargo": El cargo o puesto de trabajo que tiene esa persona si se menciona, si no se menciona déjalo en blanco.\n"desarrollo_temas": Lista de ideas discutidas o tratadas. Resume cada tema o punto debatido, sin agregar interpretaciones. Usa frases claras y concisas.\n"proposiciones": Lista de propuestas que fueron planteadas en la reunión. Indica si fueron aprobadas (true) o no (false). Una propuesta puede comenzar con frases como "propongo", "sugiero", o derivarse de una votación.\n"acuerdos_adoptados": Toda acción concreta que fue acordada, con tres campos:\n    1."descripcion": Acción específica que se debe realizar.\n    2."fecha_cumplimiento": Fecha límite o expresión temporal si se menciona (ej: "antes del viernes", "hoy").\n    3."responsable": Persona a cargo de ejecutar esa acción.\n"hora_finalizacion": Hora en la que terminó la reunión si se menciona claramente (ej: "se levanta la sesión, son las 10:40") entonces la hora de finalización es 10:40.\nAqui tienes la transcripción que debes procesar:\nBueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n/no_think\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 4000, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 13:17:49 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 13:17:49 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 13:17:49 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000237DD59C230>
2025-06-08 13:17:49 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'POST']>
2025-06-08 13:17:49 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:17:49 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'POST']>
2025-06-08 13:17:49 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:17:49 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'POST']>
2025-06-08 13:18:00 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 17:17:49 GMT'), (b'server', b'uvicorn'), (b'content-length', b'2892'), (b'content-type', b'application/json')])
2025-06-08 13:18:00 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-08 13:18:00 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'POST']>
2025-06-08 13:18:00 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:18:00 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:18:00 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:18:00 | DEBUG    | openai._base_client | _base_client.py:991 | _request() | HTTP Response: POST http://192.168.1.103:8000/v1/chat/completions "200 OK" Headers({'date': 'Sun, 08 Jun 2025 17:17:49 GMT', 'server': 'uvicorn', 'content-length': '2892', 'content-type': 'application/json'})
2025-06-08 13:18:00 | DEBUG    | openai._base_client | _base_client.py:999 | _request() | request_id: None
2025-06-08 13:18:00 | DEBUG    | app | main.py:112 | generate_acta() | Response:
{
  "lugar": "aula inteligente",
  "fecha": "2024",
  "hora": "9:15 am",
  "tipo_sesion": "Ordinaria",
  "asistencia_cargo": [
    {
      "nombre": "Director ejecutivo Oscar Lucero Moya",
      "cargo": "Director ejecutivo"
    },
    {
      "nombre": "Secretaria del director Lucia Gomez Vidal",
      "cargo": "Secretaria del director"
    },
    {
      "nombre": "Directora de operaciones Ana Maria Sanchez Mora",
      "cargo": "Directora de operaciones"
    },
    {
      "nombre": "Director de redes Roberto Martinez Sanchez",
      "cargo": "Director de redes"
    }
  ],
  "orden_del_dia": ["ventas del trimestre"],
  "desarrollo_temas": [
    "se discutió la fecha del acta anterior, que debía actualizarse de 2023 a 2024",
    "se analizó el desempeño de las ventas, que cayeron un 12% respecto al trimestre anterior",
    "se comentó que los envíos han sido retrasados varias veces y se propuso multar a los responsables por el incumplimiento",
    "se decidió aplicar una multa fija al grupo responsable por los retrasos en los envíos",
    "se acordó que Maria redactará un documento formal para solicitar la sanción a los responsables",
    "se mencionó la necesidad de arreglar el aire acondicionado en la oficina, ya que está muy caliente"
  ],
  "proposiciones": [
    {
      "descripcion": ". Multar a los responsables por los retrasos en los envíos.",
      "aprobada": true
    },
    {
      "descripcion": ". Dialogar con ellos para resolver el problema.",
      "aprobada": false
    }
  ],
  "acuerdos_adoptados": [
    {
      "descripcion": ". Actualizar la fecha del acta anterior de 2023 a 2024.",
      "fecha_cumplimiento": "",
      "responsable": ""
    },
    {
      "descripcion": ". Aplicar una multa fija al grupo responsable por los retrasos en los envíos.",
      "fecha_cumplimiento": "",
      "responsable": ""
    },
    {
      "descripcion": ". Redactar un documento formal para solicitar la sanción a los responsables.",
      "fecha_cumplimiento": "",
      "responsable": ""
    },
    {
      "descripcion": ". Arreglar el aire acondicionado en la oficina.",
      "fecha_cumplimiento": "",
     	"responsable" : ""
    	}
  	],
  	"hora_finalizacion" : "" 
}
2025-06-08 13:18:00 | DEBUG    | app | main.py:115 | generate_acta() | Acta:
lugar='aula inteligente' fecha='2024' hora='9:15 am' tipo_sesion='Ordinaria' asistencia_cargo=[AsistenteCargo(nombre='Director ejecutivo Oscar Lucero Moya', cargo='Director ejecutivo'), AsistenteCargo(nombre='Secretaria del director Lucia Gomez Vidal', cargo='Secretaria del director'), AsistenteCargo(nombre='Directora de operaciones Ana Maria Sanchez Mora', cargo='Directora de operaciones'), AsistenteCargo(nombre='Director de redes Roberto Martinez Sanchez', cargo='Director de redes')] orden_del_dia=['ventas del trimestre'] desarrollo_temas=['se discutió la fecha del acta anterior, que debía actualizarse de 2023 a 2024', 'se analizó el desempeño de las ventas, que cayeron un 12% respecto al trimestre anterior', 'se comentó que los envíos han sido retrasados varias veces y se propuso multar a los responsables por el incumplimiento', 'se decidió aplicar una multa fija al grupo responsable por los retrasos en los envíos', 'se acordó que Maria redactará un documento formal para solicitar la sanción a los responsables', 'se mencionó la necesidad de arreglar el aire acondicionado en la oficina, ya que está muy caliente'] proposiciones=[Proposicion(descripcion='. Multar a los responsables por los retrasos en los envíos.', aprobada=True), Proposicion(descripcion='. Dialogar con ellos para resolver el problema.', aprobada=False)] acuerdos_adoptados=[Acuerdo(descripcion='. Actualizar la fecha del acta anterior de 2023 a 2024.', fecha_cumplimiento='', responsable=''), Acuerdo(descripcion='. Aplicar una multa fija al grupo responsable por los retrasos en los envíos.', fecha_cumplimiento='', responsable=''), Acuerdo(descripcion='. Redactar un documento formal para solicitar la sanción a los responsables.', fecha_cumplimiento='', responsable=''), Acuerdo(descripcion='. Arreglar el aire acondicionado en la oficina.', fecha_cumplimiento='', responsable='')] hora_finalizacion=''
2025-06-08 13:32:36 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 13:32:36 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 13:32:36 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='api.gradio.app' port=443 local_address=None timeout=3 socket_options=None
2025-06-08 13:32:36 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000192545F58E0>
2025-06-08 13:32:36 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.started ssl_context=<ssl.SSLContext object at 0x0000019246F0F250> server_hostname='api.gradio.app' timeout=3
2025-06-08 13:32:37 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000192545F5AF0>
2025-06-08 13:32:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 13:32:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:32:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 13:32:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:32:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 13:32:37 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 13:32:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 08 Jun 2025 17:32:37 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'21'), (b'Connection', b'keep-alive'), (b'Server', b'nginx/1.18.0'), (b'Access-Control-Allow-Origin', b'*')])
2025-06-08 13:32:37 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET https://api.gradio.app/pkg-version "HTTP/1.1 200 OK"
2025-06-08 13:32:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 13:32:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:32:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:32:37 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:32:37 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 13:32:37 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 13:32:37 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/initiated HTTP/1.1" 200 0
2025-06-08 13:32:38 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=None socket_options=None
2025-06-08 13:32:38 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000192546DB560>
2025-06-08 13:32:38 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 13:32:38 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:32:38 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 13:32:38 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:32:38 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 13:32:38 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 17:32:38 GMT'), (b'server', b'uvicorn'), (b'content-length', b'4'), (b'content-type', b'application/json')])
2025-06-08 13:32:38 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET http://127.0.0.1:7860/gradio_api/startup-events "HTTP/1.1 200 OK"
2025-06-08 13:32:38 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 13:32:38 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:32:38 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:32:38 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:32:38 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 13:32:38 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 13:32:38 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=3 socket_options=None
2025-06-08 13:32:38 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000019254714230>
2025-06-08 13:32:38 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'HEAD']>
2025-06-08 13:32:38 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:32:38 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'HEAD']>
2025-06-08 13:32:38 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:32:38 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'HEAD']>
2025-06-08 13:32:38 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 17:32:38 GMT'), (b'server', b'uvicorn'), (b'content-length', b'25331'), (b'content-type', b'text/html; charset=utf-8')])
2025-06-08 13:32:38 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: HEAD http://127.0.0.1:7860/ "HTTP/1.1 200 OK"
2025-06-08 13:32:38 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'HEAD']>
2025-06-08 13:32:38 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:32:38 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:32:38 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:32:38 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 13:32:38 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 13:32:38 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 13:32:39 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/launched HTTP/1.1" 200 0
2025-06-08 13:37:28 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_begin with no data
2025-06-08 13:37:28 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[42:61]
2025-06-08 13:37:28 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[63:115]
2025-06-08 13:37:28 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 13:37:28 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[117:129]
2025-06-08 13:37:28 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[131:141]
2025-06-08 13:37:28 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 13:37:28 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_headers_finished with no data
2025-06-08 13:37:28 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[145:81920]
2025-06-08 13:37:28 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 13:37:29 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:49152]
2025-06-08 13:37:29 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:81920]
2025-06-08 13:37:29 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 13:37:29 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 13:37:29 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:37046]
2025-06-08 13:37:29 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_end with no data
2025-06-08 13:37:29 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_end with no data
2025-06-08 13:37:34 | INFO     | app | main.py:32 | transcribe() | Transcribe: C:\Users\lin\AppData\Local\Temp\gradio\fdfadc6d4f252af4681116790d34e753832c4f3237d6506ae4892bdc7d357452\audio_prueba.mp3
2025-06-08 13:37:34 | DEBUG    | app | main.py:41 | transcribe() | Transcription: Esto es un ejemplo
2025-06-08 13:38:29 | INFO     | app | main.py:100 | generate_acta() | Generating 'Acta'
2025-06-08 13:38:29 | DEBUG    | app | main.py:109 | generate_acta() | Prompt:

Eres un asistente experto en generar actas de reuniones a partir de transcripciones habladas informales. 
La transcripción puede incluir lenguaje natural, desordenado, repeticiones, interrupciones o errores. 
Tu tarea es analizar cuidadosamente el contenido y extraer la información clave para estructurarla en un JSON con los siguientes campos:

Instrucciones generales:
- No inventes ni asumas información que no esté explícitamente dicha.
- No incluyas símbolos que no sean coma (,) o punto (.).
- Si una información no está presente o no se puede deducir con certeza, deja el campo vacío o como lista vacía según corresponda.
- Nunca respondas con explicaciones ni comentes tus decisiones. Solo genera el JSON estructurado.

Campos explicados:
"lugar": Nombre del lugar donde ocurre la reunión. Solo si se menciona explícitamente (ej: "en el aula B", "en la oficina").
"fecha": Fecha en formato libre, si se menciona de manera explícita (ej:"15 de abril").
"hora": Hora exacta de inicio de la reunión si se menciona (ej: "son las 9:00 am"), entonces la hora es 9:00 am.
"tipo_sesion": Palabra que indique el tipo de sesión, como "Ordinaria", "Extraordinaria" u otra, solo si se dice explícitamente.
"orden_del_dia": Lista de temas que fueron anunciados como el orden del día. Solo extrae lo que se dijo antes de empezar la discusión de los temas.
"asistencia_cargo": Lista de personas que estuvieron presentes representada en dos campos:  
    "nombre_apellidos": Nombre y apellidos de las personas explícitamente presentes en la reunión, no incluyas personas ausentes aunque fueran mencionadas.
    "cargo": El cargo o puesto de trabajo que tiene esa persona si se menciona, si no se menciona déjalo en blanco.
"desarrollo_temas": Lista de ideas discutidas o tratadas. Resume cada tema o punto debatido, sin agregar interpretaciones. Usa frases claras y concisas.
"proposiciones": Lista de propuestas que fueron planteadas en la reunión. Indica si fueron aprobadas (true) o no (false). Una propuesta puede comenzar con frases como "propongo", "sugiero", o derivarse de una votación.
"acuerdos_adoptados": Toda acción concreta que fue acordada, con tres campos:
    1."descripcion": Acción específica que se debe realizar.
    2."fecha_cumplimiento": Fecha límite o expresión temporal si se menciona (ej: "antes del viernes", "hoy").
    3."responsable": Persona a cargo de ejecutar esa acción.
"hora_finalizacion": Hora en la que terminó la reunión si se menciona claramente (ej: "se levanta la sesión, son las 10:40") entonces la hora de finalización es 10:40.
Aqui tienes la transcripción que debes procesar:
Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números...  Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes.  Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.
/no_think

2025-06-08 13:38:29 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\nEres un asistente experto en generar actas de reuniones a partir de transcripciones habladas informales. \nLa transcripción puede incluir lenguaje natural, desordenado, repeticiones, interrupciones o errores. \nTu tarea es analizar cuidadosamente el contenido y extraer la información clave para estructurarla en un JSON con los siguientes campos:\n\nInstrucciones generales:\n- No inventes ni asumas información que no esté explícitamente dicha.\n- No incluyas símbolos que no sean coma (,) o punto (.).\n- Si una información no está presente o no se puede deducir con certeza, deja el campo vacío o como lista vacía según corresponda.\n- Nunca respondas con explicaciones ni comentes tus decisiones. Solo genera el JSON estructurado.\n\nCampos explicados:\n"lugar": Nombre del lugar donde ocurre la reunión. Solo si se menciona explícitamente (ej: "en el aula B", "en la oficina").\n"fecha": Fecha en formato libre, si se menciona de manera explícita (ej:"15 de abril").\n"hora": Hora exacta de inicio de la reunión si se menciona (ej: "son las 9:00 am"), entonces la hora es 9:00 am.\n"tipo_sesion": Palabra que indique el tipo de sesión, como "Ordinaria", "Extraordinaria" u otra, solo si se dice explícitamente.\n"orden_del_dia": Lista de temas que fueron anunciados como el orden del día. Solo extrae lo que se dijo antes de empezar la discusión de los temas.\n"asistencia_cargo": Lista de personas que estuvieron presentes representada en dos campos:  \n    "nombre_apellidos": Nombre y apellidos de las personas explícitamente presentes en la reunión, no incluyas personas ausentes aunque fueran mencionadas.\n    "cargo": El cargo o puesto de trabajo que tiene esa persona si se menciona, si no se menciona déjalo en blanco.\n"desarrollo_temas": Lista de ideas discutidas o tratadas. Resume cada tema o punto debatido, sin agregar interpretaciones. Usa frases claras y concisas.\n"proposiciones": Lista de propuestas que fueron planteadas en la reunión. Indica si fueron aprobadas (true) o no (false). Una propuesta puede comenzar con frases como "propongo", "sugiero", o derivarse de una votación.\n"acuerdos_adoptados": Toda acción concreta que fue acordada, con tres campos:\n    1."descripcion": Acción específica que se debe realizar.\n    2."fecha_cumplimiento": Fecha límite o expresión temporal si se menciona (ej: "antes del viernes", "hoy").\n    3."responsable": Persona a cargo de ejecutar esa acción.\n"hora_finalizacion": Hora en la que terminó la reunión si se menciona claramente (ej: "se levanta la sesión, son las 10:40") entonces la hora de finalización es 10:40.\nAqui tienes la transcripción que debes procesar:\nBueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n/no_think\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 4000, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 13:38:29 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 13:38:29 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 13:38:29 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000019254752300>
2025-06-08 13:38:29 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'POST']>
2025-06-08 13:38:29 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:38:29 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'POST']>
2025-06-08 13:38:29 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:38:29 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'POST']>
2025-06-08 13:38:40 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 17:38:29 GMT'), (b'server', b'uvicorn'), (b'content-length', b'2892'), (b'content-type', b'application/json')])
2025-06-08 13:38:40 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-08 13:38:40 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'POST']>
2025-06-08 13:38:40 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:38:40 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:38:40 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:38:40 | DEBUG    | openai._base_client | _base_client.py:991 | _request() | HTTP Response: POST http://192.168.1.103:8000/v1/chat/completions "200 OK" Headers({'date': 'Sun, 08 Jun 2025 17:38:29 GMT', 'server': 'uvicorn', 'content-length': '2892', 'content-type': 'application/json'})
2025-06-08 13:38:40 | DEBUG    | openai._base_client | _base_client.py:999 | _request() | request_id: None
2025-06-08 13:38:40 | DEBUG    | app | main.py:112 | generate_acta() | Response:
{
  "lugar": "aula inteligente",
  "fecha": "2024",
  "hora": "9:15 am",
  "tipo_sesion": "Ordinaria",
  "asistencia_cargo": [
    {
      "nombre": "Director ejecutivo Oscar Lucero Moya",
      "cargo": "Director ejecutivo"
    },
    {
      "nombre": "Secretaria del director Lucia Gomez Vidal",
      "cargo": "Secretaria del director"
    },
    {
      "nombre": "Directora de operaciones Ana Maria Sanchez Mora",
      "cargo": "Directora de operaciones"
    },
    {
      "nombre": "Director de redes Roberto Martinez Sanchez",
      "cargo": "Director de redes"
    }
  ],
  "orden_del_dia": ["ventas del trimestre"],
  "desarrollo_temas": [
    "se discutió la fecha del acta anterior, que debía actualizarse de 2023 a 2024",
    "se analizó el desempeño de las ventas, que cayeron un 12% respecto al trimestre anterior",
    "se comentó que los envíos han sido retrasados varias veces y se propuso multar a los responsables por el incumplimiento",
    "se decidió aplicar una multa fija al grupo responsable por los retrasos en los envíos",
    "se acordó que Maria redactará un documento formal para solicitar la sanción a los responsables",
    "se mencionó la necesidad de arreglar el aire acondicionado en la oficina, ya que está muy caliente"
  ],
  "proposiciones": [
    {
      "descripcion": ". Multar a los responsables por los retrasos en los envíos.",
      "aprobada": true
    },
    {
      "descripcion": ". Dialogar con ellos para resolver el problema.",
      "aprobada": false
    }
  ],
  "acuerdos_adoptados": [
    {
      "descripcion": ". Actualizar la fecha del acta anterior de 2023 a 2024.",
      "fecha_cumplimiento": "",
      "responsable": ""
    },
    {
      "descripcion": ". Aplicar una multa fija al grupo responsable por los retrasos en los envíos.",
      "fecha_cumplimiento": "",
      "responsable": ""
    },
    {
      "descripcion": ". Redactar un documento formal para solicitar la sanción a los responsables.",
      "fecha_cumplimiento": "",
      "responsable": ""
    },
    {
      "descripcion": ". Arreglar el aire acondicionado en la oficina.",
      "fecha_cumplimiento": "",
     	"responsable" : ""
    	}
  	],
  	"hora_finalizacion" : "" 
}
2025-06-08 13:38:40 | DEBUG    | app | main.py:115 | generate_acta() | Acta:
lugar='aula inteligente' fecha='2024' hora='9:15 am' tipo_sesion='Ordinaria' asistencia_cargo=[AsistenteCargo(nombre='Director ejecutivo Oscar Lucero Moya', cargo='Director ejecutivo'), AsistenteCargo(nombre='Secretaria del director Lucia Gomez Vidal', cargo='Secretaria del director'), AsistenteCargo(nombre='Directora de operaciones Ana Maria Sanchez Mora', cargo='Directora de operaciones'), AsistenteCargo(nombre='Director de redes Roberto Martinez Sanchez', cargo='Director de redes')] orden_del_dia=['ventas del trimestre'] desarrollo_temas=['se discutió la fecha del acta anterior, que debía actualizarse de 2023 a 2024', 'se analizó el desempeño de las ventas, que cayeron un 12% respecto al trimestre anterior', 'se comentó que los envíos han sido retrasados varias veces y se propuso multar a los responsables por el incumplimiento', 'se decidió aplicar una multa fija al grupo responsable por los retrasos en los envíos', 'se acordó que Maria redactará un documento formal para solicitar la sanción a los responsables', 'se mencionó la necesidad de arreglar el aire acondicionado en la oficina, ya que está muy caliente'] proposiciones=[Proposicion(descripcion='. Multar a los responsables por los retrasos en los envíos.', aprobada=True), Proposicion(descripcion='. Dialogar con ellos para resolver el problema.', aprobada=False)] acuerdos_adoptados=[Acuerdo(descripcion='. Actualizar la fecha del acta anterior de 2023 a 2024.', fecha_cumplimiento='', responsable=''), Acuerdo(descripcion='. Aplicar una multa fija al grupo responsable por los retrasos en los envíos.', fecha_cumplimiento='', responsable=''), Acuerdo(descripcion='. Redactar un documento formal para solicitar la sanción a los responsables.', fecha_cumplimiento='', responsable=''), Acuerdo(descripcion='. Arreglar el aire acondicionado en la oficina.', fecha_cumplimiento='', responsable='')] hora_finalizacion=''
2025-06-08 13:41:31 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 13:41:31 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 13:41:31 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='api.gradio.app' port=443 local_address=None timeout=3 socket_options=None
2025-06-08 13:41:31 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001FF60245AF0>
2025-06-08 13:41:31 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.started ssl_context=<ssl.SSLContext object at 0x000001FF5315CDD0> server_hostname='api.gradio.app' timeout=3
2025-06-08 13:41:32 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/initiated HTTP/1.1" 200 0
2025-06-08 13:41:32 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001FF60245A30>
2025-06-08 13:41:32 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 13:41:32 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:41:32 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 13:41:32 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:41:32 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 13:41:32 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 08 Jun 2025 17:41:32 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'21'), (b'Connection', b'keep-alive'), (b'Server', b'nginx/1.18.0'), (b'Access-Control-Allow-Origin', b'*')])
2025-06-08 13:41:32 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET https://api.gradio.app/pkg-version "HTTP/1.1 200 OK"
2025-06-08 13:41:32 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 13:41:32 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:41:32 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:41:32 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:41:32 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 13:41:32 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 13:41:33 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 13:41:34 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=None socket_options=None
2025-06-08 13:41:34 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001FF60632DE0>
2025-06-08 13:41:34 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 13:41:34 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:41:34 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 13:41:34 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:41:34 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 13:41:34 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 17:41:33 GMT'), (b'server', b'uvicorn'), (b'content-length', b'4'), (b'content-type', b'application/json')])
2025-06-08 13:41:34 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET http://127.0.0.1:7860/gradio_api/startup-events "HTTP/1.1 200 OK"
2025-06-08 13:41:34 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 13:41:34 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:41:34 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:41:34 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:41:34 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 13:41:34 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 13:41:34 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=3 socket_options=None
2025-06-08 13:41:34 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001FF6030E930>
2025-06-08 13:41:34 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'HEAD']>
2025-06-08 13:41:34 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:41:34 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'HEAD']>
2025-06-08 13:41:34 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:41:34 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'HEAD']>
2025-06-08 13:41:35 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 17:41:33 GMT'), (b'server', b'uvicorn'), (b'content-length', b'25331'), (b'content-type', b'text/html; charset=utf-8')])
2025-06-08 13:41:35 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: HEAD http://127.0.0.1:7860/ "HTTP/1.1 200 OK"
2025-06-08 13:41:35 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'HEAD']>
2025-06-08 13:41:35 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:41:35 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:41:35 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:41:35 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 13:41:35 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 13:41:35 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 13:41:35 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/launched HTTP/1.1" 200 0
2025-06-08 13:41:47 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_begin with no data
2025-06-08 13:41:47 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[42:61]
2025-06-08 13:41:47 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[63:115]
2025-06-08 13:41:47 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 13:41:47 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[117:129]
2025-06-08 13:41:47 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[131:141]
2025-06-08 13:41:47 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 13:41:47 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_headers_finished with no data
2025-06-08 13:41:47 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[145:81920]
2025-06-08 13:41:47 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 13:41:47 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 13:41:47 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 13:41:47 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 13:41:47 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:37046]
2025-06-08 13:41:47 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_end with no data
2025-06-08 13:41:47 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_end with no data
2025-06-08 13:41:48 | INFO     | app | main.py:32 | transcribe() | Transcribe: C:\Users\lin\AppData\Local\Temp\gradio\fdfadc6d4f252af4681116790d34e753832c4f3237d6506ae4892bdc7d357452\audio_prueba.mp3
2025-06-08 13:41:48 | DEBUG    | app | main.py:41 | transcribe() | Transcription: Esto es un ejemplo
2025-06-08 13:42:29 | INFO     | app | main.py:100 | generate_acta() | Generating 'Acta'
2025-06-08 13:42:29 | DEBUG    | app | main.py:109 | generate_acta() | Prompt:

Eres un asistente experto en generar actas de reuniones a partir de transcripciones habladas informales. 
La transcripción puede incluir lenguaje natural, desordenado, repeticiones, interrupciones o errores. 
Tu tarea es analizar cuidadosamente el contenido y extraer la información clave para estructurarla en un JSON con los siguientes campos:

Instrucciones generales:
- No inventes ni asumas información que no esté explícitamente dicha.
- No incluyas símbolos que no sean coma (,) o punto (.).
- Si una información no está presente o no se puede deducir con certeza, deja el campo vacío o como lista vacía según corresponda.
- Nunca respondas con explicaciones ni comentes tus decisiones. Solo genera el JSON estructurado.

Campos explicados:
"lugar": Nombre del lugar donde ocurre la reunión. Solo si se menciona explícitamente (ej: "en el aula B", "en la oficina").
"fecha": Fecha en formato libre, si se menciona de manera explícita (ej:"15 de abril").
"hora": Hora exacta de inicio de la reunión si se menciona (ej: "son las 9:00 am"), entonces la hora es 9:00 am.
"tipo_sesion": Palabra que indique el tipo de sesión, como "Ordinaria", "Extraordinaria" u otra, solo si se dice explícitamente.
"orden_del_dia": Lista de temas que fueron anunciados como el orden del día. Solo extrae lo que se dijo antes de empezar la discusión de los temas.
"asistencia_cargo": Lista de personas que estuvieron presentes representada en dos campos:  
    "nombre_apellidos": Nombre y apellidos de las personas explícitamente presentes en la reunión, no incluyas personas ausentes aunque fueran mencionadas.
    "cargo": El cargo o puesto de trabajo que tiene esa persona si se menciona, si no se menciona déjalo en blanco.
"desarrollo_temas": Lista de ideas discutidas o tratadas. Resume cada tema o punto debatido, sin agregar interpretaciones. Usa frases claras y concisas.
"proposiciones": Lista de propuestas que fueron planteadas en la reunión. Indica si fueron aprobadas (true) o no (false). Una propuesta puede comenzar con frases como "propongo", "sugiero", o derivarse de una votación.
"acuerdos_adoptados": Toda acción concreta que fue acordada, con tres campos:
    1."descripcion": Acción específica que se debe realizar.
    2."fecha_cumplimiento": Fecha límite o expresión temporal si se menciona (ej: "antes del viernes", "hoy").
    3."responsable": Persona a cargo de ejecutar esa acción.
"hora_finalizacion": Hora en la que terminó la reunión si se menciona claramente (ej: "se levanta la sesión, son las 10:40") entonces la hora de finalización es 10:40.
Aqui tienes la transcripción que debes procesar:
Bueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números...  Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes.  Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.
/no_think

2025-06-08 13:42:29 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\nEres un asistente experto en generar actas de reuniones a partir de transcripciones habladas informales. \nLa transcripción puede incluir lenguaje natural, desordenado, repeticiones, interrupciones o errores. \nTu tarea es analizar cuidadosamente el contenido y extraer la información clave para estructurarla en un JSON con los siguientes campos:\n\nInstrucciones generales:\n- No inventes ni asumas información que no esté explícitamente dicha.\n- No incluyas símbolos que no sean coma (,) o punto (.).\n- Si una información no está presente o no se puede deducir con certeza, deja el campo vacío o como lista vacía según corresponda.\n- Nunca respondas con explicaciones ni comentes tus decisiones. Solo genera el JSON estructurado.\n\nCampos explicados:\n"lugar": Nombre del lugar donde ocurre la reunión. Solo si se menciona explícitamente (ej: "en el aula B", "en la oficina").\n"fecha": Fecha en formato libre, si se menciona de manera explícita (ej:"15 de abril").\n"hora": Hora exacta de inicio de la reunión si se menciona (ej: "son las 9:00 am"), entonces la hora es 9:00 am.\n"tipo_sesion": Palabra que indique el tipo de sesión, como "Ordinaria", "Extraordinaria" u otra, solo si se dice explícitamente.\n"orden_del_dia": Lista de temas que fueron anunciados como el orden del día. Solo extrae lo que se dijo antes de empezar la discusión de los temas.\n"asistencia_cargo": Lista de personas que estuvieron presentes representada en dos campos:  \n    "nombre_apellidos": Nombre y apellidos de las personas explícitamente presentes en la reunión, no incluyas personas ausentes aunque fueran mencionadas.\n    "cargo": El cargo o puesto de trabajo que tiene esa persona si se menciona, si no se menciona déjalo en blanco.\n"desarrollo_temas": Lista de ideas discutidas o tratadas. Resume cada tema o punto debatido, sin agregar interpretaciones. Usa frases claras y concisas.\n"proposiciones": Lista de propuestas que fueron planteadas en la reunión. Indica si fueron aprobadas (true) o no (false). Una propuesta puede comenzar con frases como "propongo", "sugiero", o derivarse de una votación.\n"acuerdos_adoptados": Toda acción concreta que fue acordada, con tres campos:\n    1."descripcion": Acción específica que se debe realizar.\n    2."fecha_cumplimiento": Fecha límite o expresión temporal si se menciona (ej: "antes del viernes", "hoy").\n    3."responsable": Persona a cargo de ejecutar esa acción.\n"hora_finalizacion": Hora en la que terminó la reunión si se menciona claramente (ej: "se levanta la sesión, son las 10:40") entonces la hora de finalización es 10:40.\nAqui tienes la transcripción que debes procesar:\nBueno, bueno... ya estamos en el aula inteligente, son las 9:15, empecemos, hoy toca sesión Ordinaria. Director ejecutivo Oscar Lucero Moya, Secretaria del director Lucia Gomez Vidal, Directora de operaciones Ana Maria Sanchez Mora, director de redes Roberto Martinez Sanchez, no Roberto no vino, mandó un correo, está con el tema del servidor caído. La orden del día de hoy es las ventas del trimestre. Comencemos hablando del acta anterior, fue aprobada, pero hay que cambiar la fecha, dice 2023 hay que poner 2024, bien, Ana, te corresponde cambiarle la fecha al acta, esta bien. Que pasa con las ventas del trimestre. Aquí tengo los números... \xa0Mmm... 12% abajo. Nos dejaron colgados otra vez con los envíos. ¿propuestas para eso? Multarlos. Punto. Apoyo, pero que sea un porcentaje fijo. Yo propongo que dialoguemos con ellos, algún problema tuvieron que tener, ya hemos dialogado demasiado con ellos y es la cuarta vez que ocurre dialogar de nuevo es una perdida de tiempo, estoy de acuerdo, entonces votamos por aplicarles una multa? Todos a favor... Bien, aprobado, Maria redactara el documento de petición para sancionar a los multados, debes terminarlo antes de pasado mañana. Hacemos teletrabajo el viernes?, yo digo que sí, no podemos hacer teletrabajo esta semana tenemos que asistir a la oficina para reunirnos nuevamente, no se hará teletrabajo el viernes. \xa0Prepara una propuesta para mayo. ¿Algo más? Sí, que arreglen el aire acondicionado, aquí parece el Sahara, Oscar avísale hoy al equipo técnico por favor. Se levanta la sesión, 10:40.\n/no_think\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 4000, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 13:42:29 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 13:42:29 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 13:42:29 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001FF60373320>
2025-06-08 13:42:29 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'POST']>
2025-06-08 13:42:29 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 13:42:29 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'POST']>
2025-06-08 13:42:29 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 13:42:29 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'POST']>
2025-06-08 13:42:39 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 17:42:29 GMT'), (b'server', b'uvicorn'), (b'content-length', b'2892'), (b'content-type', b'application/json')])
2025-06-08 13:42:39 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-08 13:42:39 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'POST']>
2025-06-08 13:42:39 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 13:42:39 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 13:42:39 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 13:42:39 | DEBUG    | openai._base_client | _base_client.py:991 | _request() | HTTP Response: POST http://192.168.1.103:8000/v1/chat/completions "200 OK" Headers({'date': 'Sun, 08 Jun 2025 17:42:29 GMT', 'server': 'uvicorn', 'content-length': '2892', 'content-type': 'application/json'})
2025-06-08 13:42:39 | DEBUG    | openai._base_client | _base_client.py:999 | _request() | request_id: None
2025-06-08 13:42:39 | DEBUG    | app | main.py:112 | generate_acta() | Response:
{
  "lugar": "aula inteligente",
  "fecha": "2024",
  "hora": "9:15 am",
  "tipo_sesion": "Ordinaria",
  "asistencia_cargo": [
    {
      "nombre": "Director ejecutivo Oscar Lucero Moya",
      "cargo": "Director ejecutivo"
    },
    {
      "nombre": "Secretaria del director Lucia Gomez Vidal",
      "cargo": "Secretaria del director"
    },
    {
      "nombre": "Directora de operaciones Ana Maria Sanchez Mora",
      "cargo": "Directora de operaciones"
    },
    {
      "nombre": "Director de redes Roberto Martinez Sanchez",
      "cargo": "Director de redes"
    }
  ],
  "orden_del_dia": ["ventas del trimestre"],
  "desarrollo_temas": [
    "se discutió la fecha del acta anterior, que debía actualizarse de 2023 a 2024",
    "se analizó el desempeño de las ventas, que cayeron un 12% respecto al trimestre anterior",
    "se comentó que los envíos han sido retrasados varias veces y se propuso multar a los responsables por el incumplimiento",
    "se decidió aplicar una multa fija al grupo responsable por los retrasos en los envíos",
    "se acordó que Maria redactará un documento formal para solicitar la sanción a los responsables",
    "se mencionó la necesidad de arreglar el aire acondicionado en la oficina, ya que está muy caliente"
  ],
  "proposiciones": [
    {
      "descripcion": ". Multar a los responsables por los retrasos en los envíos.",
      "aprobada": true
    },
    {
      "descripcion": ". Dialogar con ellos para resolver el problema.",
      "aprobada": false
    }
  ],
  "acuerdos_adoptados": [
    {
      "descripcion": ". Actualizar la fecha del acta anterior de 2023 a 2024.",
      "fecha_cumplimiento": "",
      "responsable": ""
    },
    {
      "descripcion": ". Aplicar una multa fija al grupo responsable por los retrasos en los envíos.",
      "fecha_cumplimiento": "",
      "responsable": ""
    },
    {
      "descripcion": ". Redactar un documento formal para solicitar la sanción a los responsables.",
      "fecha_cumplimiento": "",
      "responsable": ""
    },
    {
      "descripcion": ". Arreglar el aire acondicionado en la oficina.",
      "fecha_cumplimiento": "",
     	"responsable" : ""
    	}
  	],
  	"hora_finalizacion" : "" 
}
2025-06-08 13:42:39 | DEBUG    | app | main.py:115 | generate_acta() | Acta:
lugar='aula inteligente' fecha='2024' hora='9:15 am' tipo_sesion='Ordinaria' asistencia_cargo=[AsistenteCargo(nombre='Director ejecutivo Oscar Lucero Moya', cargo='Director ejecutivo'), AsistenteCargo(nombre='Secretaria del director Lucia Gomez Vidal', cargo='Secretaria del director'), AsistenteCargo(nombre='Directora de operaciones Ana Maria Sanchez Mora', cargo='Directora de operaciones'), AsistenteCargo(nombre='Director de redes Roberto Martinez Sanchez', cargo='Director de redes')] orden_del_dia=['ventas del trimestre'] desarrollo_temas=['se discutió la fecha del acta anterior, que debía actualizarse de 2023 a 2024', 'se analizó el desempeño de las ventas, que cayeron un 12% respecto al trimestre anterior', 'se comentó que los envíos han sido retrasados varias veces y se propuso multar a los responsables por el incumplimiento', 'se decidió aplicar una multa fija al grupo responsable por los retrasos en los envíos', 'se acordó que Maria redactará un documento formal para solicitar la sanción a los responsables', 'se mencionó la necesidad de arreglar el aire acondicionado en la oficina, ya que está muy caliente'] proposiciones=[Proposicion(descripcion='. Multar a los responsables por los retrasos en los envíos.', aprobada=True), Proposicion(descripcion='. Dialogar con ellos para resolver el problema.', aprobada=False)] acuerdos_adoptados=[Acuerdo(descripcion='. Actualizar la fecha del acta anterior de 2023 a 2024.', fecha_cumplimiento='', responsable=''), Acuerdo(descripcion='. Aplicar una multa fija al grupo responsable por los retrasos en los envíos.', fecha_cumplimiento='', responsable=''), Acuerdo(descripcion='. Redactar un documento formal para solicitar la sanción a los responsables.', fecha_cumplimiento='', responsable=''), Acuerdo(descripcion='. Arreglar el aire acondicionado en la oficina.', fecha_cumplimiento='', responsable='')] hora_finalizacion=''
2025-06-08 14:05:57 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 14:05:58 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 14:05:58 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='api.gradio.app' port=443 local_address=None timeout=3 socket_options=None
2025-06-08 14:05:58 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000167EBBFCFB0>
2025-06-08 14:05:58 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.started ssl_context=<ssl.SSLContext object at 0x00000167EB7C56D0> server_hostname='api.gradio.app' timeout=3
2025-06-08 14:05:58 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 14:05:58 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/initiated HTTP/1.1" 200 0
2025-06-08 14:05:59 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000167EBC53530>
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 08 Jun 2025 18:05:59 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'21'), (b'Connection', b'keep-alive'), (b'Server', b'nginx/1.18.0'), (b'Access-Control-Allow-Origin', b'*')])
2025-06-08 14:05:59 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET https://api.gradio.app/pkg-version "HTTP/1.1 200 OK"
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 14:05:59 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 14:05:59 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 14:05:59 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=None socket_options=None
2025-06-08 14:05:59 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000167EBD68B00>
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 18:05:59 GMT'), (b'server', b'uvicorn'), (b'content-length', b'4'), (b'content-type', b'application/json')])
2025-06-08 14:05:59 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET http://127.0.0.1:7860/gradio_api/startup-events "HTTP/1.1 200 OK"
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 14:05:59 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 14:05:59 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 14:05:59 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=3 socket_options=None
2025-06-08 14:05:59 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000167EBD69430>
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'HEAD']>
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'HEAD']>
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'HEAD']>
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 18:05:59 GMT'), (b'server', b'uvicorn'), (b'content-length', b'25330'), (b'content-type', b'text/html; charset=utf-8')])
2025-06-08 14:05:59 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: HEAD http://127.0.0.1:7860/ "HTTP/1.1 200 OK"
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'HEAD']>
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 14:05:59 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 14:05:59 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 14:05:59 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 14:05:59 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 14:06:00 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/launched HTTP/1.1" 200 0
2025-06-08 14:06:12 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_begin with no data
2025-06-08 14:06:12 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[42:61]
2025-06-08 14:06:12 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[63:115]
2025-06-08 14:06:12 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 14:06:12 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[117:129]
2025-06-08 14:06:12 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[131:141]
2025-06-08 14:06:12 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 14:06:12 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_headers_finished with no data
2025-06-08 14:06:12 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[145:81920]
2025-06-08 14:06:12 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 14:06:12 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 14:06:12 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 14:06:12 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 14:06:12 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:37046]
2025-06-08 14:06:12 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_end with no data
2025-06-08 14:06:12 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_end with no data
2025-06-08 14:06:14 | INFO     | app | main.py:32 | transcribe() | Transcribe: C:\Users\lin\AppData\Local\Temp\gradio\fdfadc6d4f252af4681116790d34e753832c4f3237d6506ae4892bdc7d357452\audio_prueba.mp3
2025-06-08 14:06:14 | DEBUG    | app | main.py:41 | transcribe() | Transcription: Esto es un ejemplo
2025-06-08 14:06:46 | INFO     | app | main.py:100 | generate_acta() | Generating 'Acta'
2025-06-08 14:06:46 | DEBUG    | app | main.py:109 | generate_acta() | Prompt:

Eres un asistente experto en generar actas de reuniones a partir de transcripciones habladas informales. 
La transcripción puede incluir lenguaje natural, desordenado, repeticiones, interrupciones o errores. 
Tu tarea es analizar cuidadosamente el contenido y extraer la información clave para estructurarla en un JSON con los siguientes campos:

Instrucciones generales:
- No inventes ni asumas información que no esté explícitamente dicha.
- No incluyas símbolos que no sean coma (,) o punto (.).
- Si una información no está presente o no se puede deducir con certeza, deja el campo vacío o como lista vacía según corresponda.
- Nunca respondas con explicaciones ni comentes tus decisiones. Solo genera el JSON estructurado.

Campos explicados:
"lugar": Nombre del lugar donde ocurre la reunión. Solo si se menciona explícitamente (ej: "en el aula B", "en la oficina").
"fecha": Fecha en formato libre, si se menciona de manera explícita (ej:"15 de abril").
"hora": Hora exacta de inicio de la reunión si se menciona (ej: "son las 9:00 am"), entonces la hora es 9:00 am.
"tipo_sesion": Palabra que indique el tipo de sesión, como "Ordinaria", "Extraordinaria" u otra, solo si se dice explícitamente.
"orden_del_dia": Lista de temas que fueron anunciados como el orden del día. Solo extrae lo que se dijo antes de empezar la discusión de los temas.
"asistencia_cargo": Lista de personas que estuvieron presentes representada en dos campos:  
    "nombre_apellidos": Nombre y apellidos de las personas explícitamente presentes en la reunión, no incluyas personas ausentes aunque fueran mencionadas.
    "cargo": El cargo o puesto de trabajo que tiene esa persona si se menciona, si no se menciona déjalo en blanco.
"desarrollo_temas": Lista de ideas discutidas o tratadas. Resume cada tema o punto debatido, sin agregar interpretaciones. Usa frases claras y concisas.
"proposiciones": Lista de propuestas que fueron planteadas en la reunión. Indica si fueron aprobadas (true) o no (false). Una propuesta puede comenzar con frases como "propongo", "sugiero", o derivarse de una votación.
"acuerdos_adoptados": Toda acción concreta que fue acordada, con tres campos:
    1."descripcion": Acción específica que se debe realizar.
    2."fecha_cumplimiento": Fecha límite o expresión temporal si se menciona (ej: "antes del viernes", "hoy").
    3."responsable": Persona a cargo de ejecutar esa acción.
"hora_finalizacion": Hora en la que terminó la reunión si se menciona claramente (ej: "se levanta la sesión, son las 10:40") entonces la hora de finalización es 10:40.
Aqui tienes la transcripción que debes procesar:
Bueno, ya parece que estamos todos. Son como las 8:30, y estamos reunidos virtualmente en la sesión ordinaria del día
Jorge Avila estás ahi?, si, estoy en mi escritorio, creo que la conexión se me había caído. Lucía Morales está en línea, dile que entre. A Pablo no lo veo, pero dijo anoche que tenía problemas con el transporte. jefa Clara Gonzales ¿está?, si aquí estoy, quería decirles que estoy un poco apurada
Empezamos hablando de lo de ayer... lo de los formularios. Se habló bastante, pero no se llegó a algo concreto. Creo que se comentó que deberían unificarse, pero nadie quiso tomar eso de momento, ¿unificarse?, si que los pongan todos juntos, pero eso va a ser ilegible señores, ¿no están de acuerdo con unificarlos?, no no eso no se resuelve asi, hay que ver que hacemos. Lo de los turnos de guardia, alguien dijo por ahi que están mal asignados. Con lo del los formularios deberíamos reorganizarlos y ya, Lucia ya habíamos cambiado de tema, ¿y que?, pero ese tema no había cerrado, estoy proponiendo que se puede hacer. Clara, ¿que piensas tu?, no a ver hay que preguntarle a la jefa. A mi me parece que deberíamos digitalizar los informes mensuales. Y eso que tiene que ver, estamos hablando de la guardia. No, pero si están hablando de los formulario, estas muy interesado en la guardia Jorge, claro si llevo 3 mese haciendo guardia casi todos los fines de semana, eso ya o puede ser. La guardia yo la voy a programar este mes y le voy a dar los turnos a cada uno justamente, ¿ok?. Y respecto a los formulario, vamos a hacer lo que dice Lucia, con reorganizarlos es suficiente, no se compliquen tanto, todo el mundo ¿deacuerdo?, si , si. Ya seguimos.
Caballero alguien se ha fijado en lo del sistema de acceso. No Jorge, eso no es responsabilidad de nosotros. Ah no?, pero si el otro día el secretario del director me entrego una planilla grandísima que ponía que era sanción con los que estén entrando con cuenta administrador. Pero eso ya lo cambiaron, nosotros necesitamos ese acceso para trabajar, por si acaso, jorge, ve mañana a hablar personalmente con el director para ver si resolvemos eso, ¿vale?, Si. 
Que va, la conexión esta malísima. Tengo que hablar con alguien para que nos ponga mejor internet, así no se puede. ¿para que vas a hacer eso Clara? ya tienes demasiadas responsabilidades. Eso no es ahora, cuando yo me desocupe lo hago. Vamos a seguir. Los archivos antiguos que están en el almacén hay que moverlos de ahi, porque se van a echar a perder, Lucia y Jorge dedíquense a hacer eso hoy, llamen a los nuevos trabajadores para que los ayuden.  La próxima reunion como siempre, es la semana que viene, ya son las 10 de la mañana, me tengo que ir, ya vamos a terminar.

/no_think

2025-06-08 14:06:46 | DEBUG    | openai._base_client | _base_client.py:453 | _build_request() | Request options: {'method': 'post', 'url': '/chat/completions', 'files': None, 'json_data': {'messages': [{'role': 'assistant', 'content': '\nEres un asistente experto en generar actas de reuniones a partir de transcripciones habladas informales. \nLa transcripción puede incluir lenguaje natural, desordenado, repeticiones, interrupciones o errores. \nTu tarea es analizar cuidadosamente el contenido y extraer la información clave para estructurarla en un JSON con los siguientes campos:\n\nInstrucciones generales:\n- No inventes ni asumas información que no esté explícitamente dicha.\n- No incluyas símbolos que no sean coma (,) o punto (.).\n- Si una información no está presente o no se puede deducir con certeza, deja el campo vacío o como lista vacía según corresponda.\n- Nunca respondas con explicaciones ni comentes tus decisiones. Solo genera el JSON estructurado.\n\nCampos explicados:\n"lugar": Nombre del lugar donde ocurre la reunión. Solo si se menciona explícitamente (ej: "en el aula B", "en la oficina").\n"fecha": Fecha en formato libre, si se menciona de manera explícita (ej:"15 de abril").\n"hora": Hora exacta de inicio de la reunión si se menciona (ej: "son las 9:00 am"), entonces la hora es 9:00 am.\n"tipo_sesion": Palabra que indique el tipo de sesión, como "Ordinaria", "Extraordinaria" u otra, solo si se dice explícitamente.\n"orden_del_dia": Lista de temas que fueron anunciados como el orden del día. Solo extrae lo que se dijo antes de empezar la discusión de los temas.\n"asistencia_cargo": Lista de personas que estuvieron presentes representada en dos campos:  \n    "nombre_apellidos": Nombre y apellidos de las personas explícitamente presentes en la reunión, no incluyas personas ausentes aunque fueran mencionadas.\n    "cargo": El cargo o puesto de trabajo que tiene esa persona si se menciona, si no se menciona déjalo en blanco.\n"desarrollo_temas": Lista de ideas discutidas o tratadas. Resume cada tema o punto debatido, sin agregar interpretaciones. Usa frases claras y concisas.\n"proposiciones": Lista de propuestas que fueron planteadas en la reunión. Indica si fueron aprobadas (true) o no (false). Una propuesta puede comenzar con frases como "propongo", "sugiero", o derivarse de una votación.\n"acuerdos_adoptados": Toda acción concreta que fue acordada, con tres campos:\n    1."descripcion": Acción específica que se debe realizar.\n    2."fecha_cumplimiento": Fecha límite o expresión temporal si se menciona (ej: "antes del viernes", "hoy").\n    3."responsable": Persona a cargo de ejecutar esa acción.\n"hora_finalizacion": Hora en la que terminó la reunión si se menciona claramente (ej: "se levanta la sesión, son las 10:40") entonces la hora de finalización es 10:40.\nAqui tienes la transcripción que debes procesar:\nBueno, ya parece que estamos todos. Son como las 8:30, y estamos reunidos virtualmente en la sesión ordinaria del día\nJorge Avila estás ahi?, si, estoy en mi escritorio, creo que la conexión se me había caído. Lucía Morales está en línea, dile que entre. A Pablo no lo veo, pero dijo anoche que tenía problemas con el transporte. jefa Clara Gonzales ¿está?, si aquí estoy, quería decirles que estoy un poco apurada\nEmpezamos hablando de lo de ayer... lo de los formularios. Se habló bastante, pero no se llegó a algo concreto. Creo que se comentó que deberían unificarse, pero nadie quiso tomar eso de momento, ¿unificarse?, si que los pongan todos juntos, pero eso va a ser ilegible señores, ¿no están de acuerdo con unificarlos?, no no eso no se resuelve asi, hay que ver que hacemos. Lo de los turnos de guardia, alguien dijo por ahi que están mal asignados. Con lo del los formularios deberíamos reorganizarlos y ya, Lucia ya habíamos cambiado de tema, ¿y que?, pero ese tema no había cerrado, estoy proponiendo que se puede hacer. Clara, ¿que piensas tu?, no a ver hay que preguntarle a la jefa. A mi me parece que deberíamos digitalizar los informes mensuales. Y eso que tiene que ver, estamos hablando de la guardia. No, pero si están hablando de los formulario, estas muy interesado en la guardia Jorge, claro si llevo 3 mese haciendo guardia casi todos los fines de semana, eso ya o puede ser. La guardia yo la voy a programar este mes y le voy a dar los turnos a cada uno justamente, ¿ok?. Y respecto a los formulario, vamos a hacer lo que dice Lucia, con reorganizarlos es suficiente, no se compliquen tanto, todo el mundo ¿deacuerdo?, si , si. Ya seguimos.\nCaballero alguien se ha fijado en lo del sistema de acceso. No Jorge, eso no es responsabilidad de nosotros. Ah no?, pero si el otro día el secretario del director me entrego una planilla grandísima que ponía que era sanción con los que estén entrando con cuenta administrador. Pero eso ya lo cambiaron, nosotros necesitamos ese acceso para trabajar, por si acaso, jorge, ve mañana a hablar personalmente con el director para ver si resolvemos eso, ¿vale?, Si. \nQue va, la conexión esta malísima. Tengo que hablar con alguien para que nos ponga mejor internet, así no se puede. ¿para que vas a hacer eso Clara? ya tienes demasiadas responsabilidades. Eso no es ahora, cuando yo me desocupe lo hago. Vamos a seguir. Los archivos antiguos que están en el almacén hay que moverlos de ahi, porque se van a echar a perder, Lucia y Jorge dedíquense a hacer eso hoy, llamen a los nuevos trabajadores para que los ayuden.  La próxima reunion como siempre, es la semana que viene, ya son las 10 de la mañana, me tengo que ir, ya vamos a terminar.\n\n/no_think\n'}], 'model': '/media/work/learn/ai/models/llm/qwen/qwen3/Qwen3-4B-AWQ', 'frequency_penalty': 0.5, 'max_tokens': 4000, 'presence_penalty': 1.2, 'temperature': 0, 'top_p': 0.95}, 'extra_json': {'guided_json': {'$defs': {'Acuerdo': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Detalles del acuerdo adoptado. Toda acción o decisión que tenga un responsable y una fecha límite, o que se aprobó como obligación. Debe contener solo la tarea concreta o acción a realizar, no el nombre del responsable.', 'examples': ['Mandar una carta de peticion para extender el tiempo de descanzo', 'Crear un documento de aviso para eviar a los multados'], 'title': 'Descripcion'}, 'fecha_cumplimiento': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha límite para cumplir el acuerdo (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha Cumplimiento'}, 'responsable': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre de la persona encargada de cumplir el acuerdo.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Responsable'}}, 'required': ['descripcion', 'fecha_cumplimiento', 'responsable'], 'title': 'Acuerdo', 'type': 'object'}, 'AsistenteCargo': {'properties': {'nombre': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Nombre completo del asistente a la reunión. Solo incluye nombres y apellidos.', 'examples': ['Mario Diaz González', 'Roberto', 'Joaquin Rivas'], 'title': 'Nombre'}, 'cargo': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Rol o posición del asistente en la organización', 'examples': ['Director ejecutivo', 'Decana de la facultad de tecnologias interactivas'], 'title': 'Cargo'}}, 'required': ['nombre', 'cargo'], 'title': 'AsistenteCargo', 'type': 'object'}, 'Proposicion': {'properties': {'descripcion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Texto de la propuesta presentada.', 'examples': ['Se propone extender el tiempo de descanso después de la guardia laboral', 'Se propone multar a los que dañen la propiedad de la empresa'], 'title': 'Descripcion'}, 'aprobada': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'description': 'Indica si la propuesta fue aprobada (True/False).', 'examples': [True, False], 'title': 'Aprobada'}}, 'required': ['descripcion', 'aprobada'], 'title': 'Proposicion', 'type': 'object'}}, 'properties': {'lugar': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Ubicación física donde se realizó la reunión.', 'examples': ['Aula Inteligente'], 'title': 'Lugar'}, 'fecha': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Fecha de realización de la reunión (formato DD-MM-YYYY).', 'examples': ['15-04-2025'], 'title': 'Fecha'}, 'hora': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de inicio de la reunión (formato HH:MM). Opcional.', 'examples': ['10:30'], 'title': 'Hora'}, 'tipo_sesion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': "Tipo de sesión ('Ordinaria' o 'Extraordinaria'). Opcional.", 'examples': ['Ordinaria', 'Extraordinaria'], 'title': 'Tipo Sesion'}, 'asistencia_cargo': {'description': 'Lista de personas presentes con su cargo. Excluye a personas que se dijo explícitamente que no asistieron.', 'items': {'$ref': '#/$defs/AsistenteCargo'}, 'title': 'Asistencia Cargo', 'type': 'array'}, 'orden_del_dia': {'description': 'Lista de temas planificados para tratar en la reunión. Solo incluye lo que se dijo que sería la orden del día, no todo lo que se discutió.', 'items': {'type': 'string'}, 'title': 'Orden Del Dia', 'type': 'array'}, 'desarrollo_temas': {'description': 'Lista de temas discutidos durante la reunión.', 'items': {'type': 'string'}, 'title': 'Desarrollo Temas', 'type': 'array'}, 'proposiciones': {'description': 'Lista de propuestas presentadas y su estado de aprobación.', 'items': {'$ref': '#/$defs/Proposicion'}, 'title': 'Proposiciones', 'type': 'array'}, 'acuerdos_adoptados': {'description': 'Acuerdos alcanzados durante la reunión.', 'items': {'$ref': '#/$defs/Acuerdo'}, 'title': 'Acuerdos Adoptados', 'type': 'array'}, 'hora_finalizacion': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'description': 'Hora de finalización de la reunión (formato HH:MM).', 'examples': ['12:30'], 'title': 'Hora Finalizacion'}}, 'required': ['lugar', 'fecha', 'hora', 'tipo_sesion', 'asistencia_cargo', 'orden_del_dia', 'desarrollo_temas', 'proposiciones', 'acuerdos_adoptados', 'hora_finalizacion'], 'title': 'ActaReunion', 'type': 'object'}}}
2025-06-08 14:06:47 | DEBUG    | openai._base_client | _base_client.py:952 | _request() | Sending HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions
2025-06-08 14:06:47 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='192.168.1.103' port=8000 local_address=None timeout=5.0 socket_options=None
2025-06-08 14:06:47 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x00000167EBE07EF0>
2025-06-08 14:06:47 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'POST']>
2025-06-08 14:06:47 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 14:06:47 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'POST']>
2025-06-08 14:06:47 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 14:06:47 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'POST']>
2025-06-08 14:06:54 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 18:06:46 GMT'), (b'server', b'uvicorn'), (b'content-length', b'2138'), (b'content-type', b'application/json')])
2025-06-08 14:06:54 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: POST http://192.168.1.103:8000/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-08 14:06:54 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'POST']>
2025-06-08 14:06:54 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 14:06:54 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 14:06:54 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 14:06:54 | DEBUG    | openai._base_client | _base_client.py:991 | _request() | HTTP Response: POST http://192.168.1.103:8000/v1/chat/completions "200 OK" Headers({'date': 'Sun, 08 Jun 2025 18:06:46 GMT', 'server': 'uvicorn', 'content-length': '2138', 'content-type': 'application/json'})
2025-06-08 14:06:54 | DEBUG    | openai._base_client | _base_client.py:999 | _request() | request_id: None
2025-06-08 14:06:54 | DEBUG    | app | main.py:112 | generate_acta() | Response:
{
  "lugar": "virtualmente",
  "fecha": "día",
  "hora": "8:30",
  "tipo_sesion": "Ordinaria",
  "asistencia_cargo": [
    {
      "nombre": "Jorge Avila",
      "cargo": ""
    },
    {
      "nombre": "Lucía Morales",
      "cargo": ""
    },
    {
      "nombre": "Clara Gonzales",
      "cargo": ""
    }
  ],
  "orden_del_dia": [
    "lo de ayer... lo de los formularios",
    "lo de los turnos de guardia"
  ],
  "desarrollo_temas": [
    "Se habló bastante, pero no se llegó a algo concreto. Creo que se comentó que deberían unificarse, pero nadie quiso tomar eso de momento.",
    "Alguien dijo por ahi que están mal asignados.",
    "Se proponió reorganizar los formularios y digitalizar los informes mensuales.",
    "Se mencionó la posibilidad de programar turnos de guardia este mes.",
    "Se sugirió mover archivos antiguos del almacén antes de que se echen a perder."
  ],
  "proposiciones": [
    {
      "descripcion": "Unificar los formularios.",
      "aprobada": false
    },
    {
      "descripcion": "Reorganizar los formularios.",
      "aprobada": true
    },
    {
      "descripcion": "Digitalizar los informes mensuales.",
      "aprobada": true
    },
    {
      "descripcion": "",
      "aprobada": false
    }
  ],
  "acuerdos_adoptados": [
    {
      "descripcion": "",
      "fecha_cumplimiento": "",
      "responsable": ""
    },
    {
      "descripcion": "",
      "fecha_cumplimiento": "",
      "responsable": ""
    }
  ],
  "hora_finalizacion": ""
}
2025-06-08 14:06:54 | DEBUG    | app | main.py:115 | generate_acta() | Acta:
lugar='virtualmente' fecha='día' hora='8:30' tipo_sesion='Ordinaria' asistencia_cargo=[AsistenteCargo(nombre='Jorge Avila', cargo=''), AsistenteCargo(nombre='Lucía Morales', cargo=''), AsistenteCargo(nombre='Clara Gonzales', cargo='')] orden_del_dia=['lo de ayer... lo de los formularios', 'lo de los turnos de guardia'] desarrollo_temas=['Se habló bastante, pero no se llegó a algo concreto. Creo que se comentó que deberían unificarse, pero nadie quiso tomar eso de momento.', 'Alguien dijo por ahi que están mal asignados.', 'Se proponió reorganizar los formularios y digitalizar los informes mensuales.', 'Se mencionó la posibilidad de programar turnos de guardia este mes.', 'Se sugirió mover archivos antiguos del almacén antes de que se echen a perder.'] proposiciones=[Proposicion(descripcion='Unificar los formularios.', aprobada=False), Proposicion(descripcion='Reorganizar los formularios.', aprobada=True), Proposicion(descripcion='Digitalizar los informes mensuales.', aprobada=True), Proposicion(descripcion='', aprobada=False)] acuerdos_adoptados=[Acuerdo(descripcion='', fecha_cumplimiento='', responsable=''), Acuerdo(descripcion='', fecha_cumplimiento='', responsable='')] hora_finalizacion=''
2025-06-08 14:07:12 | INFO     | app | main.py:137 | generate_pdf() | Generating PDF
2025-06-08 14:07:12 | DEBUG    | fpdf.fpdf | fpdf.py:3712 | _perform_page_break_if_need_be() | Page break on page 1 at y=260 for element of height 20 > 277
2025-06-08 14:07:12 | DEBUG    | fpdf.output | output.py:1107 | _log_final_sections_sizes() | Final size summary of the biggest document sections:
2025-06-08 14:07:12 | DEBUG    | fpdf.output | output.py:1109 | _log_final_sections_sizes() | - pages: 1.5KiB
2025-06-08 14:07:12 | DEBUG    | fpdf.output | output.py:1109 | _log_final_sections_sizes() | - fonts: 199.0B
2025-06-08 14:07:12 | INFO     | app | main.py:154 | generate_pdf() | Correctly generated PDF
2025-06-08 14:09:04 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 14:09:04 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 14:09:05 | DEBUG    | asyncio | proactor_events.py:634 | __init__() | Using proactor: IocpProactor
2025-06-08 14:09:05 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='api.gradio.app' port=443 local_address=None timeout=3 socket_options=None
2025-06-08 14:09:05 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/initiated HTTP/1.1" 200 0
2025-06-08 14:09:05 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001A592D61BB0>
2025-06-08 14:09:05 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.started ssl_context=<ssl.SSLContext object at 0x000001A5927E96D0> server_hostname='api.gradio.app' timeout=3
2025-06-08 14:09:05 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=None socket_options=None
2025-06-08 14:09:05 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001A592D84BC0>
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 18:09:05 GMT'), (b'server', b'uvicorn'), (b'content-length', b'4'), (b'content-type', b'application/json')])
2025-06-08 14:09:05 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET http://127.0.0.1:7860/gradio_api/startup-events "HTTP/1.1 200 OK"
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 14:09:05 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 14:09:05 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 14:09:05 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.started host='127.0.0.1' port=7860 local_address=None timeout=3 socket_options=None
2025-06-08 14:09:05 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001A592D85700>
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'HEAD']>
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'HEAD']>
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'HEAD']>
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'date', b'Sun, 08 Jun 2025 18:09:05 GMT'), (b'server', b'uvicorn'), (b'content-length', b'25330'), (b'content-type', b'text/html; charset=utf-8')])
2025-06-08 14:09:05 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: HEAD http://127.0.0.1:7860/ "HTTP/1.1 200 OK"
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'HEAD']>
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 14:09:05 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 14:09:05 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 14:09:05 | DEBUG    | urllib3.connectionpool | connectionpool.py:1049 | _new_conn() | Starting new HTTPS connection (1): huggingface.co:443
2025-06-08 14:09:05 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001A592D2C740>
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.started request=<Request [b'GET']>
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_headers.complete
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.started request=<Request [b'GET']>
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | send_request_body.complete
2025-06-08 14:09:05 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.started request=<Request [b'GET']>
2025-06-08 14:09:06 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Sun, 08 Jun 2025 18:09:05 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'21'), (b'Connection', b'keep-alive'), (b'Server', b'nginx/1.18.0'), (b'Access-Control-Allow-Origin', b'*')])
2025-06-08 14:09:06 | INFO     | httpx | _client.py:1025 | _send_single_request() | HTTP Request: GET https://api.gradio.app/pkg-version "HTTP/1.1 200 OK"
2025-06-08 14:09:06 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.started request=<Request [b'GET']>
2025-06-08 14:09:06 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | receive_response_body.complete
2025-06-08 14:09:06 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.started
2025-06-08 14:09:06 | DEBUG    | httpcore.http11 | _trace.py:47 | trace() | response_closed.complete
2025-06-08 14:09:06 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.started
2025-06-08 14:09:06 | DEBUG    | httpcore.connection | _trace.py:47 | trace() | close.complete
2025-06-08 14:09:06 | DEBUG    | urllib3.connectionpool | connectionpool.py:544 | _make_request() | https://huggingface.co:443 "HEAD /api/telemetry/gradio/launched HTTP/1.1" 200 0
2025-06-08 14:09:19 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_begin with no data
2025-06-08 14:09:19 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[42:61]
2025-06-08 14:09:19 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[63:115]
2025-06-08 14:09:19 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 14:09:19 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_field with data[117:129]
2025-06-08 14:09:19 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_header_value with data[131:141]
2025-06-08 14:09:19 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_header_end with no data
2025-06-08 14:09:19 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_headers_finished with no data
2025-06-08 14:09:19 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[145:98304]
2025-06-08 14:09:20 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 14:09:20 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 14:09:20 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 14:09:20 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:131072]
2025-06-08 14:09:20 | DEBUG    | python_multipart.multipart | multipart.py:625 | callback() | Calling on_part_data with data[0:20662]
2025-06-08 14:09:20 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_part_end with no data
2025-06-08 14:09:20 | DEBUG    | python_multipart.multipart | multipart.py:628 | callback() | Calling on_end with no data
2025-06-08 14:09:21 | INFO     | app | main.py:32 | transcribe() | Transcribe: C:\Users\lin\AppData\Local\Temp\gradio\fdfadc6d4f252af4681116790d34e753832c4f3237d6506ae4892bdc7d357452\audio_prueba.mp3
2025-06-08 14:09:21 | DEBUG    | app | main.py:41 | transcribe() | Transcription: Esto es un ejemplo
